options {
	IGNORE_CASE = true;
	STATIC = false;
	ERROR_REPORTING = true;
}

PARSER_BEGIN(php)
package Javacc;

import java.util.*;
import servidor_fileversion.Propiedades;
import servidor_fileversion.TablaSimbolos;
import java.io.StringReader;

public class php{
	public Propiedades propiedad = new Propiedades();
	public TablaSimbolos TS = new TablaSimbolos();
	///Variables NORMALES
	public static String VerVar="" ,VerVar2="",VerVar3="",VerVar4="",VerVar5="",VerVar6="",VerVar7="",VerVar8="",VerVar9="",VerVar10="", VerVar11="" ,VerVar12="",VerVar13="",VerVar14="",VerVar15="",VerVar16="",VerVar17="",VerVar18="",VerVar19="",VerVar20="",VerVar21="",VerVar22="",VerVar23="",VerVar24="",VerVar25="", VerVarOtr="";
	public static String OperadorAr="", OperandoAr="", OperadorRe="", OperandoRe="", OperadorLo="", OperandoLo="", OperadorRe2="", OperadorAr2="", OperadorLo2="";
	//NUMEROS ENTEROS
	public static String ValorAsig1="", ValorAsig2="", ValorAsig3="", ValorAsig4="", ValorAsig5="", ValorAsig6="", ValorAsig7="", ValorAsig8="", ValorAsig9="", ValorAsig10="", ValorAsig11="", ValorAsig12="", ValorAsig13="", ValorAsig14="", ValorAsig15="", ValorAsig16="", ValorAsig17="", Simb="";
	//NUMEROS PUNTO FLOTANTE
	public static String ValorAsigF1="", ValorAsigF2="", ValorAsigF3="", ValorAsigF4="", ValorAsigF5="", ValorAsigF6="", ValorAsigF7="", ValorAsigF8="", ValorAsigF9="", ValorAsigF10="", ValorAsigF11="", ValorAsigF12="", ValorAsigF13="", ValorAsigF14="", ValorAsigF15="", ValorAsigF16="";
	public static String ResulVar1="", ValorIdEcho="", VarIdImp2="", VarNumImp2="";
	//VARIABLES PARA ALMACENAR PARAMETROS DEL IF
	public static String ValorP1="", ValorP2="", ValorP3="", ValorP4="", ValorP5="", ValorP6="", ValorP7="", ValorP8="", ValorP9="", ValorP10="";
	public static String VerVar30 ="";
	//VARIABLES PARA ID+
	public static String cadenaCa ="", cadenaCa2="";
	public static void main(String[] args) throws ParseException{
		try{
			php analizador = new php(new StringReader("<?php"
								+"include (\"caracteristicas.php\");"
								+ "class auto extends caracteristicas{"
								+"var $a;"
								+"function __construct ($a, $b, $c, $d){"
								+"parent ::__construct ($b, $c, $d);"
								+"$this ->a = $a; }"
								+"function imprimir(){"
								+"$a = 9;"
								+"while (true ){"
								+"if ($a < 10){break ;}"
								+"echo \"color\" . $this ->b . \" marca \". $this ->c . \" anio \" . $this ->d . \" recorrido \".$this ->a . \" \\n \";"
								+"$a ++;}"
								+"}"
								+"} "
								+"?>"));
			analizador.ProgramaInicio();
			System.out.println("------Correctamente Analizado------");
		}catch(ParseException e){
			System.out.println(e.getMessage());
			System.out.println("**Error Sintactico: Se ha encontrado errores en el Analisis");
		}catch(TokenMgrError e){
			System.out.println("**Ha ocurrido un Error Lexico");
			System.out.println(e.getMessage());
		}catch(Exception err){
			System.out.println(err);
			System.out.println("**Posible Error Semantico");
		}
	}
}
PARSER_END(php)

SKIP:{
	" "|"\n"|"\r"|"\r\n"|"\t"
}

MORE: 
{
	 <"/*"~["/"]>{System.out.println("COMENTARIO_MULTI" );}: IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT>
TOKEN:
{
	<FORMAL_COMMENT: "*/">{System.out.println("COMENTARIO_MULTI" );} : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
TOKEN:
{
	<MULTI_LINE_COMMENT: "*/"> {System.out.println("COMENTARIO_MULTI" );} : DEFAULT 
}

TOKEN: 
{
	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" |"\r\n")?>{System.out.println("COMENTARIOSim" );}
}

TOKEN:{
	  <NUM : (["0"-"9"])+> {System.out.println("NUMERO -> "+ image + "\r\n");}
    | <ID : <LETTER>(<LETTER>|<NUM>)*> {System.out.println("ID -> " + image + "\r\n");}
    | <#LETTER: (["a"-"z","A"-"Z"])>
    | <CADENA : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*> {System.out.println("CADENA -> " + image + "\r\n");}
    | <DEC : (["0"-"9"])+"."(["0"-"9"])+> {System.out.println("DECIMAL -> "+ image + "\r\n");}
    | <CARAC : ["a"-"z"]> {System.out.println("CARACTER -> "+ image + "\r\n");}
}

TOKEN:
{
	 <TAGINICIO: "<?php" > {System.out.println("InicioPro -> "+ image + "\r\n");}
	|<TAGFIN: "?>"> {System.out.println("FinPro -> "+ image + "\r\n");}
	|<PCLASS: "class "> {System.out.println("P_Class -> "+ image + "\r\n");}
	|<PVAR: "var "> {System.out.println("P_VAR -> "+ image + "\r\n");}
	|<PFUNCION: "function "> {System.out.println("P_FUCT -> "+ image + "\r\n");}
	|<PFOR: "for "> {System.out.println("P_FOR -> "+ image + "\r\n");}
	|<PECHO: "echo "> {System.out.println("P_ECHO -> "+ image + "\r\n");}
	|<PRETURN: "return "> {System.out.println("P_RETU -> "+ image + "\r\n");}
	|<PNEW: "new "> {System.out.println("P_NEW -> "+ image + "\r\n");}
	|<PCONST: "construct "> {System.out.println("P_Constru -> "+ image + "\r\n");}
	|<PINCL: "include "> {System.out.println("P_INCLUD -> "+ image + "\r\n");}
	|<PPARENT: "parent "> {System.out.println("P_PARE -> "+ image + "\r\n");}
	|<PTHIS: "this "> {System.out.println("P_THI -> "+ image + "\r\n");}
	|<PEXT: "extends "> {System.out.println("P_EXT -> "+ image + "\r\n");}
	|<PIF: "if "> {System.out.println("P_IF -> "+ image + "\r\n");}
	|<PELSE: "else "> {System.out.println("P_ELSE -> "+ image + "\r\n");}
	|<PCASE: "case "> {System.out.println("P_CASE -> "+ image + "\r\n");}
	|<PSWIT: "switch "> {System.out.println("P_SWIT -> "+ image + "\r\n");}
	|<PBREAK: "break "> {System.out.println("P_BREK -> "+ image + "\r\n");}
	|<PDEFAULT: "default "> {System.out.println("P_DEFA -> "+ image + "\r\n");}
	|<PWHI: "while "> {System.out.println("P_WHIL -> "+ image + "\r\n");}
	|<PDO: "do "> {System.out.println("P_DO -> "+ image + "\r\n");}
	|<PCONTI: "continue "> {System.out.println("P_CONT -> "+ image + "\r\n");}
	|<PNULL: "NULL "> {System.out.println("P_NULL -> "+ image + "\r\n");}
	|<PTRUE: "true "> {System.out.println("P_TRUE -> "+ image + "\r\n");}
	|<PFALSE: "false "> {System.out.println("P_FALSE -> "+ image + "\r\n");}
}

TOKEN:
{
	 <LLAVEA: "{"> {System.out.println("Llave_Abier -> "+ image + "\r\n");}
	|<LLAVEC: "}"> {System.out.println("Llave_Cerra -> "+ image + "\r\n");}
	|<IGUAL: "="> {System.out.println("Igual -> "+ image + "\r\n");}
	|<PUNTOCOMA: ";"> {System.out.println("Punto_Coma -> "+ image + "\r\n");}
	|<COMA: ","> {System.out.println("SigComa -> "+ image + "\r\n");}
	|<DOLAR: "$"> {System.out.println("SigDolar -> "+ image + "\r\n");}
	|<COMILLASIMPLE: "'"> {System.out.println("ComillaS -> "+ image + "\r\n");}
	|<COMILLADOBLE: "\""> {System.out.println("ComillaD -> "+ image + "\r\n");}
	|<PARA: "("> {System.out.println("Parente_Abier -> "+ image + "\r\n");}
	|<PARC: ")"> {System.out.println("Parente_Cerra -> "+ image + "\r\n");}
	|<MAYOR: ">"> {System.out.println("Mayor -> "+ image + "\r\n");}
	|<MENOR: "<"> {System.out.println("Menor -> "+ image + "\r\n");}
	|<DECR: "--"> {System.out.println("Decremento -> "+ image + "\r\n");}
	|<INC: "++"> {System.out.println("Incremento -> "+ image + "\r\n");}
	|<CORCHA: "["> {System.out.println("CorcheteA -> "+ image + "\r\n");}
	|<CORCHC: "]"> {System.out.println("CorcheteC -> "+ image + "\r\n");}
	|<POR: "*"> {System.out.println("SigPor -> "+ image + "\r\n");}
	|<SUMA: "+"> {System.out.println("SigMas -> "+ image + "\r\n");}
	|<RESTA: "-"> {System.out.println("SigMenos -> "+ image + "\r\n");}
	|<DIV: "/"> {System.out.println("SigDiv -> "+ image + "\r\n");}
	|<MOD: "%"> {System.out.println("SigMod -> "+ image + "\r\n");}
	|<POTEN: "**"> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<IGUAL2: "=="> {System.out.println("Igualdad -> "+ image + "\r\n");}
	|<IDENT: "==="> {System.out.println("SigIden -> "+ image + "\r\n");}
	|<DIFE1: "!="> {System.out.println("Dif!= -> "+ image + "\r\n");}
	|<DIFE2: "<>"> {System.out.println("Dif<> -> "+ image + "\r\n");}
	|<NOIDE: "!=="> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<MENORI: "<="> {System.out.println("MenorQue -> "+ image + "\r\n");}
	|<MAYORI: ">="> {System.out.println("MayorQue -> "+ image + "\r\n");}
	|<LAND: "and "> {System.out.println("AND -> "+ image + "\r\n");}
	|<LOR: "or "> {System.out.println("OR -> "+ image + "\r\n");}
	|<LXOR: "xor "> {System.out.println("XOR -> "+ image + "\r\n");}
	|<LNOT: "!"> {System.out.println("NOT -> "+ image + "\r\n");}
	|<LAND2: "&&"> {System.out.println("AND&& -> "+ image + "\r\n");}
	|<LOR2: "||"> {System.out.println("OR|| -> "+ image + "\r\n");}
	|<AMP: "&"> {System.out.println("Amperston -> "+ image + "\r\n");}
	|<ASIG: "->"> {System.out.println("Asignacion -> "+ image + "\r\n");}
	|<PUNTO: "."> {System.out.println("Punto -> "+ image + "\r\n");}
	|<BARRA: "\\"> {System.out.println("Barra -> "+ image + "\r\n");}
	|<SALTO: "n "> {System.out.println("SaltoL -> "+ image + "\r\n");}
	|<DOBLEP: "::"> {System.out.println("DoblePunto -> "+ image + "\r\n");}
	|<GUIONB: "_"> {System.out.println("GuionBajo -> "+ image + "\r\n");}
	|<DOSP: ":"> {System.out.println("Dos_Puntos -> "+ image + "\r\n");}
}
///INICIO DE GRAMATICA
void ProgramaInicio():{} //Aqui se declaran variables y objetos de javacc
{
	<TAGINICIO>(CuerpoPrograma())+<TAGFIN>
}

void CuerpoPrograma():{Token T1;}
{
	 CuerpoComentario()
	|(MInclude())*(Clase()|MetodoMain())
}

void CuerpoComentario():{}
{
	<SINGLE_LINE_COMMENT>
}

void Clase():{Token T2;}
{
	<PCLASS> <ID>(<PEXT><ID>)?<LLAVEA>(Constructor())? (CuerpoClase())* <LLAVEC>
}

void CuerpoClase():{}
{
	 CVariables()
}


void CVariables():{Token Ids, InDe=null;}
{
	 <PVAR><DOLAR> Ids = <ID> {/*propiedad.setNombre(Ids.image);*/ if(Ids.image.equals("a")){VerVar=Ids.image;} if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;} 
	 														   if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;} 
	 														   if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;} 
	 														   if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;} 
	 														   if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;} 
	 														   if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;} 
	 														   if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;} 
	 														   if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;} 
	 														   if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;} 
	 						  }
	 					(TVariable())?
	 					(<COMA><DOLAR> Ids =<ID>(TVariable())?)*  /*VARIABLES GLOBALES  */ 
	|<DOLAR> Ids = <ID> (TVariable() {if(Ids.image.equals("a")){VerVar=Ids.image;} if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;} 
	 									if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;} 
	 									if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;} 
	 									if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;} 
	 									if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;} 
	 									if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;} 
	 									if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;} 
	 									if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;} 
	 									if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;} }
						|OAr()<PUNTOCOMA>
						|ORe()<PUNTOCOMA>
						|OLog()<PUNTOCOMA>
						|(InDe = <INC>  
							|InDe = <DECR>{Simb = InDe.image; System.out.println("---PASA_AQUI--"); if(Simb.equals("++")){
																				System.out.println("%%%%%%%%%%"+Simb);
																				if(VerVar != ""){
																					if(ValorAsig1 != ""){
																						int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF1 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF1);
																						System.out.println("*********DEC-INC1++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}/*if(VerVar2 != ""){
																				  	if(ValorAsig2 != ""){
																						int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF2 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar3 != ""){
																					if(ValorAsig3 != ""){
																						int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF3 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar4 != ""){
																					if(ValorAsig4 != ""){
																						int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF4 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar5 != ""){
																					if(ValorAsig5 != ""){
																						int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF5 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar6 != ""){
																					if(ValorAsig6 != ""){
																						int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF6 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar7 != ""){
																					if(ValorAsig7 != ""){
																						int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF7 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar8 != ""){
																					if(ValorAsig8 != ""){
																						int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF8 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVarOtr != ""){
																					System.out.println("----------> " +VerVarOtr);
																				}*/
																			}if(Simb.equals("--")){
																				   	System.out.println("%%%%%%%%%%"+Simb);
																				   	if(VerVar != ""){
																						if(ValorAsig1 != ""){
																							int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF1 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF1);
																							System.out.println("*********DEC-INC1--********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar2 != ""){
																					  	if(ValorAsig2 != ""){
																							int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF2 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar3 != ""){
																						if(ValorAsig3 != ""){
																							int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF3 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar4 != ""){
																						if(ValorAsig4 != ""){
																							int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF4 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar5 != ""){
																						if(ValorAsig5 != ""){
																							int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF5 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar6 != ""){
																						if(ValorAsig6 != ""){
																							int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF6 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar7 != ""){
																						if(ValorAsig7 != ""){
																							int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF7 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar8 != ""){
																						if(ValorAsig8 != ""){
																							int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********"); 
																							int RES = variableL + 1;
																							System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF8 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********"); 
																							float RES = variableL2 + 1;
																							System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}
																				}
																			})<PUNTOCOMA>)? 
						(<COMA><DOLAR><ID>(TVariable())?)*  /*VARIABLES LOCALES */
	|DecFunction()
	|OperacionesArit1()
	|Imprimir()
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()
	|SentenciaDoWh()
	|SentenciaFor()
}
void TVariable():{}
{
	(AsignacionVar()|<PUNTOCOMA>)
}
void AsignacionVar():{Token IdAsgi, ValAsig;}
{
	 <IGUAL>(<COMILLASIMPLE>IdAsgi=<ID><COMILLASIMPLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS SIM********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |<PNEW> <ID><PARA><PARC>
	 	     |<COMILLADOBLE>IdAsgi=<ID><COMILLADOBLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS DOB********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |ValAsig=<NUM>(OAr())? {if(ValorAsig16.equals("") && ValorAsig15 != ""){
	 	     							ValorAsig16=ValAsig.image;
	 	     						 }if(ValorAsig15.equals("") && ValorAsig14 != ""){
	 	     							ValorAsig15=ValAsig.image;
	 	     						 }if(ValorAsig14.equals("") && ValorAsig13 != ""){
	 	     							ValorAsig14=ValAsig.image;
	 	     						 }if(ValorAsig13.equals("") && ValorAsig12 != ""){
	 	     							ValorAsig13=ValAsig.image;
	 	     						 }if(ValorAsig12.equals("") && ValorAsig11 != ""){
	 	     							ValorAsig12=ValAsig.image;
	 	     						 }if(ValorAsig11.equals("") && ValorAsig10 != ""){
	 	     							ValorAsig11=ValAsig.image;
	 	     						 }if(ValorAsig10.equals("") && ValorAsig9 != ""){
	 	     							ValorAsig10=ValAsig.image;
	 	     						 }if(ValorAsig9.equals("") && ValorAsig8 != ""){
	 	     							ValorAsig9=ValAsig.image;
	 	     						 }if(ValorAsig8.equals("") && ValorAsig7 != ""){
	 	     							ValorAsig8=ValAsig.image;
	 	     						 }if(ValorAsig7.equals("") && ValorAsig6 != ""){
	 	     							ValorAsig7=ValAsig.image;
	 	     						 }if(ValorAsig6.equals("") && ValorAsig5 != ""){
	 	     							ValorAsig6=ValAsig.image;
	 	     						 }if(ValorAsig5.equals("") && ValorAsig4 != ""){
	 	     							ValorAsig5=ValAsig.image;
	 	     						 }if(ValorAsig4.equals("") && ValorAsig3 != ""){
	 	     							ValorAsig4=ValAsig.image;
	 	     						 }if(ValorAsig3.equals("") && ValorAsig2 != ""){
	 	     							ValorAsig3=ValAsig.image;
	 	     						 }if(ValorAsig2.equals("") && ValorAsig1 != ""){
	 	     							ValorAsig2=ValAsig.image;
	 	     						 }if(ValorAsig1.equals("")){
	 	     							ValorAsig1=ValAsig.image; System.out.println("%%%%%%"+VerVar);
	 	     						 }
	 	     					    System.out.println("*********VAR NUM********"); System.out.println(VerVar +" = "+ ValorAsig1); //System.out.println(VerVar3 +" = "+ ValorAsig2); 
	 	     					    System.out.println("*******************");}
	 	     |ValAsig=<DEC>(OAr())? {if(ValorAsigF10.equals("") && ValorAsigF9 != "" && ValorAsig10 != ""){
	 	     							ValorAsigF10=ValAsig.image;
	 	     						 }if(ValorAsigF9.equals("") && ValorAsigF8 != "" && ValorAsig9 != ""){
	 	     							ValorAsigF9=ValAsig.image;
	 	     						 }if(ValorAsigF8.equals("") && ValorAsigF7 != "" && ValorAsig8 != ""){
	 	     							ValorAsigF8=ValAsig.image;
	 	     						 }if(ValorAsigF7.equals("") && ValorAsigF6 != "" && ValorAsig7 != ""){
	 	     							ValorAsigF7=ValAsig.image;
	 	     						 }if(ValorAsigF6.equals("") && ValorAsigF5 != "" && ValorAsig6 != ""){
	 	     							ValorAsigF6=ValAsig.image;
	 	     						 }if(ValorAsigF5.equals("") && ValorAsigF4 != "" && ValorAsig5 != ""){
	 	     							ValorAsigF5=ValAsig.image;
	 	     						 }if(ValorAsigF4.equals("") && ValorAsigF3 != "" && ValorAsig4 != ""){
	 	     							ValorAsigF4=ValAsig.image;
	 	     						 }if(ValorAsigF3.equals("") && ValorAsigF2 != "" && ValorAsig3 != ""){
	 	     							ValorAsigF3=ValAsig.image;
	 	     						 }if(ValorAsigF2.equals("") && ValorAsigF1 != "" && ValorAsig2 != ""){
	 	     							ValorAsigF2=ValAsig.image;
	 	     						 }if(ValorAsigF1.equals("") && ValorAsig1 != ""){
	 	     							ValorAsigF1=ValAsig.image;
	 	     						 }
	 	     					    System.out.println("*********VAR FLOAT********"); System.out.println(VerVar2 +" = "+ ValorAsigF1); 
	 	     					    System.out.println("*******************");}
	 	     |<DOLAR>IdAsgi=<ID>(OAr()
	 	     				|<PUNTO>(<COMILLADOBLE><ID><COMILLADOBLE>|<NUM>|<DEC>))?)<PUNTOCOMA>
	|<ASIG><ID><PARA><DOLAR><ID>(<COMA><DOLAR><ID>)*<PARC><PUNTOCOMA>
}

void DecFunction():{}{ //DEFINICION DE METODOS Y FUNCIONES
	<PFUNCION><ID><PARA>(ParametrosFuction())?<PARC><LLAVEA>CuerpoFunction()<LLAVEC>
}

void CuerpoFunction():{}
{
	 ((CVariables())+(CuerpoReturn())?|CuerpoMatriz())
}
///****DECLARACION DE MATRIZ******
void CuerpoMatriz():{}
{
	 <PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(<PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>CuerpoFor()<LLAVEC>|CuerpoVecFor()/*DEC. VEC.*/)<LLAVEC>AsignarMatVect()Imprimir()
}
void ParametrosFOR():{}
{
	<DOLAR><ID><IGUAL><NUM><PUNTOCOMA> <DOLAR><ID>(<MAYOR>|<MENOR>)<NUM><PUNTOCOMA> <DOLAR><ID>(<INC>|<DECR>)
}

void CuerpoFor():{}
{
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><POR><DOLAR><ID><PUNTOCOMA>
}
void CuerpoVecFor():{}
{
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><PUNTOCOMA>
}
void AsignarMatVect():{}
{
	<DOLAR><ID><CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?<IGUAL><NUM><PUNTOCOMA>
}
void Imprimir():{Token CIds, VIds=null;} /*IMPRESION MATRIZ*/
{
	<PECHO><DOLAR><ID>(<CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?
						|(<PUNTO>(<COMILLADOBLE><BARRA><SALTO><COMILLADOBLE>
							      |<DOLAR>VIds=<ID>{ValorIdEcho=VIds.image;}))*
						|<COMILLADOBLE>(CIds=<ID>{cadenaCa2= cadenaCa2 + CIds.image +" ";})+<COMILLADOBLE>)<PUNTOCOMA>{System.out.println("*******ECHO CIds*******"); 
																														System.out.println(cadenaCa2); System.out.println("****************");
																														System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
																														if(ValorIdEcho.equals("a")){
																															System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
																														}
																													  }
}
///*******OPERACIONES ARITMETICAS
void OperacionesArit1():{}
{
	 <RESTA><DOLAR><ID><PUNTOCOMA>
	
}
void OAr():{Token OperA; Token OperandA;} /// OPERACIONES ARITMETICAS CON OPERANDOS
{
	((OperA=<POR>{OperadorAr=OperA.image;}
	|OperA=<SUMA>{OperadorAr=OperA.image;}
	|OperA=<DIV>{OperadorAr=OperA.image;}
	|OperA=<POTEN>{OperadorAr=OperA.image;}
	|OperA=<MOD>{OperadorAr=OperA.image;}
	|OperA=<RESTA>{OperadorAr=OperA.image;})
		(<DOLAR> OperandA=<ID>{OperandoAr=OperandA.image;}
			|OperandA=<NUM>{OperandoAr=OperandA.image;}
			|OperandA=<DEC>{OperandoAr=OperandA.image;}))+
}

void ORe():{Token OperR, OperandR;}/// OPERACIONES RELACIONALES CON OPERANDOS
{
	(OperR=<IGUAL2>{OperadorRe=OperR.image;}
	|OperR=<IDENT>{OperadorRe=OperR.image;}
	|OperR=<DIFE1>{OperadorRe=OperR.image;}
	|OperR=<DIFE2>{OperadorRe=OperR.image;}
	|OperR=<NOIDE>{OperadorRe=OperR.image;}
	|OperR=<MENOR>{OperadorRe=OperR.image;}
	|OperR=<MAYOR>{OperadorRe=OperR.image;}
	|OperR=<MENORI>{OperadorRe=OperR.image;}
	|OperR=<MAYORI>{OperadorRe=OperR.image;})
		(<DOLAR>OperandR=<ID>{OperandoRe =OperandR.image;}
			   |OperandR=<NUM>{OperandoRe =OperandR.image;}
			   |OperandR=<DEC>{OperandoRe =OperandR.image;})
}

void OLog():{Token OperL, OperandL;}///OPERACIONES LOGICAS CON OPERANDOS
{
	((OperL=<LAND>{OperadorLo=OperL.image;}
	 |OperL=<LOR>{OperadorLo=OperL.image;}
	 |OperL=<LXOR>{OperadorLo=OperL.image;}
	 |OperL=<LNOT>{OperadorLo=OperL.image;}
	 |OperL=<LAND2>{OperadorLo=OperL.image;}
	 |OperL=<LOR2>{OperadorLo=OperL.image;}
	    )<DOLAR>OperandL=<ID>{OperandoLo=OperandL.image;})+
}

void ParametrosFuction():{}//PARAMETROS DE LAS FUNCIONES
{
	(<AMP>)?<DOLAR><ID>(<COMA>(<AMP>)?<DOLAR><ID>)*
}

void CuerpoReturn():{}
{
	 <PRETURN><DOLAR><ID><PUNTOCOMA>
}

void Constructor():{}  /*DECLARACION DEL CONSTRUCTOR*/
{
	(<PVAR><DOLAR><ID>TVariable())* <PFUNCION><GUIONB><GUIONB><PCONST><PARA>(ParametrosFuction())?<PARC><LLAVEA>
													(CuerpoConstructor())+
													<LLAVEC> {System.out.println("*******ECHO CONST*******"); System.out.println(cadenaCa); System.out.println("****************");}
}
void CuerpoConstructor():{Token IdsCons;}
{
	 MetParent()
	|<PECHO><COMILLADOBLE>(IdsCons=<ID>{cadenaCa= cadenaCa + IdsCons.image +" ";})+<COMILLADOBLE><PUNTOCOMA>
	|<DOLAR>(<ID><IGUAL><PNEW><ID><PARA><PARC>|<PTHIS><ASIG><ID><IGUAL>(<NUM>|<DEC>|<PNULL>|<DOLAR><ID>))<PUNTOCOMA>
	|MetThis()
}

void MInclude():{}
{
	<PINCL>(<PARA><COMILLADOBLE><ID><PUNTO><ID><COMILLADOBLE><PARC>|<COMILLADOBLE><ID><PUNTO><ID><COMILLADOBLE>)<PUNTOCOMA>
}

void MetParent():{}
{
	<PPARENT><DOBLEP>(<GUIONB><GUIONB><PCONST><PARA>ParametrosFuction()<PARC>|<ID><PARA><PARC>)<PUNTOCOMA>
}
void MetThis():{}
{
	<PTHIS><ASIG><ID><IGUAL>(<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PUNTOCOMA>
}
//*****************SENTENCIAS IF*******************************
void CuerpoIF():{}
{
	<PIF><PARA>ParametrosIF()<PARC><LLAVEA>SentenciasIF()<LLAVEC>(<PELSE>(Elseifs())?<LLAVEA>SentenciasIF()<LLAVEC>)?/*(<PELSE><LLAVEA><LLAVEC>)?*/
}
void Elseifs():{}
{
	(<PIF><PARA>ParametrosIF()<PARC><LLAVEA>SentenciasIF()<LLAVEC><PELSE>)+
}

void ParametrosIF():{Token IdParam1, IdParam2, NumParam1, DecParam1,IdParam3, IdParam4;}
{
	(<DOLAR>IdParam1=<ID>ORe2() {ValorP1= IdParam1.image;}
		      (<DOLAR>IdParam2=<ID> {ValorP2= IdParam2.image;}
		      	|NumParam1=<NUM> {ValorP3= NumParam1.image;}
		      	|DecParam1=<DEC> {ValorP4= DecParam1.image;}
		      	|<COMILLASIMPLE>IdParam3=<ID><COMILLASIMPLE> {ValorP5= IdParam3.image;}
		      	|<COMILLADOBLE>IdParam4=<ID><COMILLADOBLE>{ValorP6= IdParam4.image;}){if(ValorP1 != ""){
		      																			if(ValorP2 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}if(ValorP3 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig2.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig3.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig4.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig5.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig6.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig7.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig8.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig9.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig10.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig11.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig12.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig13.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("!=")){
		      																					if(Integer.parseInt(ValorAsig1) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig2) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig3) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig4) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig5) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig6) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig7) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig8) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig9) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig10) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig11) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig12) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("<")){
		      																					if(Integer.parseInt(ValorAsig1) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}
		      																				}if(OperadorRe2.equals(">")){
		      																					//JSLFKJASD
		      																				}if(OperadorRe2.equals("<=")){
		      																					//SLKFJALSDFA
		      																				}if(OperadorRe2.equals(">=")){
		      																					//JSFLKAJSKLDF
		      																				}
		      																			}if(ValorP4 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}if(ValorP5 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}if(ValorP6 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}
		      																		 }} 
		      															(OLog2()<DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>))*|<PTRUE>|<PFALSE>)
}
void NotParametros():{} //!($b==0)
{
	<LNOT><PARA><DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PARC>
}
void ORe2():{Token OperadorR2;} /// OPERACIONES RELACIONALES SIN OPERANDOS
{
	(OperadorR2=<IGUAL2> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<IDENT> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<DIFE1> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<DIFE2> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<NOIDE> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MENOR> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MAYOR> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MENORI> {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MAYORI> {OperadorRe2=OperadorR2.image;})
}
void OLog2():{Token OperadorL2;} /// OPEACIONES LOGICAS SIN OPERENADOS
{
	(OperadorL2=<LAND> {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LOR> {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LXOR> {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LNOT> {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LAND2> {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LOR2> {OperadorLo2 =OperadorL2.image;})
}
void OAr2():{Token OperadorA2;} /// OPERACIONES ARITMETICAS SIN OPERANDOS
{
	(OperadorA2=<POR> {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<SUMA> {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<DIV> {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<POTEN> {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<MOD> {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<RESTA> {OperadorAr2 = OperadorA2.image;})
}
void SentenciasIF():{}
{
	(<DOLAR><ID>(<IGUAL>(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>|(OAr2()(<DOLAR><ID>|<NUM>|<DEC>))*)|(<INC>|<DECR>))|(<PBREAK>|<PCONTI>))<PUNTOCOMA>
}

//**************SENTENCIA SWITCH******************
void SentenciaSW():{}
{
	<PSWIT><PARA><DOLAR><ID><PARC><LLAVEA>(SentCase())+<LLAVEC>
}
void SentCase():{}
{
	<PCASE><NUM><DOSP>CuerpoCase()(<PDEFAULT><DOSP>CuerpoCase())?
}
void CuerpoCase():{}
{
	 Imprimir2() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|SentenciasIF() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|CuerpoIF()
}
void Imprimir2():{Token IdsImp2; Token NumImp2;}
{
	<PECHO>(<COMILLADOBLE>(IdsImp2=<ID> {VarIdImp2 = VarIdImp2 + IdsImp2.image; }
						|NumImp2=<NUM> {VarNumImp2 = VarNumImp2 + NumImp2.image;})*
			<COMILLADOBLE>)<PUNTOCOMA>{System.out.println("**************"); System.out.println(VarIdImp2+"-No."+VarNumImp2); System.out.println("**************");}
}
//*****************SENTENCIA WHILE******************************
void SentenciaWh():{}
{
	<PWHI><PARA>ParametrosIF()<PARC><LLAVEA>(CuerpoWh())+<LLAVEC>
}
void CuerpoWh():{Token IdIm1, IdIm2, IdIm3, IdIm4, IdIm5;}
{
	 <PECHO>(<DOLAR>(IdIm1=<ID>
	 	            |<PTHIS><ASIG>IdIm2=<ID>)
	        |(<COMILLADOBLE>IdIm3=<ID><COMILLADOBLE>)(<PUNTO>(<COMILLADOBLE>(IdIm4=<ID>
	        																|<BARRA><SALTO>)<COMILLADOBLE>
	        												  |<DOLAR><PTHIS><ASIG>IdIm5=<ID>))*)<PUNTOCOMA>
	 //SUMATORIA DE 
	|<DOLAR><ID>(<IGUAL><DOLAR><ID>OAr()
				|(<INC>|<DECR>))<PUNTOCOMA>
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|SentenciaSW()
}

//***************SENTENCIA DO WHILE*****************************
void SentenciaDoWh():{}
{
	<PDO><LLAVEA>(CuerpoWh())+<LLAVEC><PWHI><PARA>ParametrosIF()<PARC><PUNTOCOMA>
}
void SentenciaFor():{}
{
	<LNOT><PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(CuerpoFor2())+<LLAVEC>
}
void CuerpoFor2():{}
{
	<DOLAR><ID><IGUAL><DOLAR><ID>(OAr2()(<DOLAR><ID>|<NUM>|<DEC>))*<PUNTOCOMA>
	|Imprimir()
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()
}
void MetodoMain():{}
{
	<DOLAR><ID>(<IGUAL><PNEW><ID><PARA>(<NUM>|<ID>|ParametrosMain())?<PARC>|<ASIG><ID><PARA>(<NUM>|<ID>|<DOLAR><ID><ASIG><ID>)?<PARC>)<PUNTOCOMA>
}
void ParametrosMain():{}
{
	(<NUM>|<DEC>|<COMILLADOBLE><ID><COMILLADOBLE>)(<COMA>(<NUM>|<DEC>|<COMILLADOBLE><ID><COMILLADOBLE>))*
}