/* Generated By:JJTree&JavaCC: Do not edit this line. php.java */
package jjt;

import java.util.*;
import servidor_fileversion.Propiedades;
import servidor_fileversion.TablaSimbolos;
import java.io.StringReader;

public class php/*@bgen(jjtree)*/implements phpTreeConstants, phpConstants {/*@bgen(jjtree)*/
  protected JJTphpState jjtree = new JJTphpState();public Propiedades propiedad = new Propiedades();
        public TablaSimbolos TS = new TablaSimbolos();
        ///Variables NORMALES
        public static String OperadorAr="", OperandoAr="", OperadorRe="", OperandoRe="", OperadorLo="", OperandoLo="", OperadorRe2="", OperadorAr2="", OperadorLo2="", OpeMenosAr="", IdMenosAr="", ValorIdCWh="";
        //NUMEROS ENTEROS
        public static String VerVar="" ,VerVar2="",VerVar3="",VerVar4="",VerVar5="",VerVar6="",VerVar7="",VerVar8="",VerVar9="",VerVar10="", VerVar11="" ,VerVar12="",VerVar13="",VerVar14="",VerVar15="",VerVar16="",VerVar17="",VerVar18="",VerVar19="",VerVar20="",VerVar21="",VerVar22="",VerVar23="",VerVar24="",VerVar25="", VerVarOtr="";
        public static String ValorAsig1="", ValorAsig2="", ValorAsig3="", ValorAsig4="", ValorAsig5="", ValorAsig6="", ValorAsig7="", ValorAsig8="", ValorAsig9="", ValorAsig10="", ValorAsig11="", ValorAsig12="", ValorAsig13="", ValorAsig14="", ValorAsig15="", ValorAsig16="",Simb="";
        //NUMEROS PUNTO FLOTANTE
        //public static String VerVarF="" ,VerVarF2="",VerVarF3="",VerVarF4="",VerVarF5="",VerVarF6="",VerVarF7="",VerVarF8="",VerVarF9="",VerVarF10="", VerVarF11="", VerVarF12="", VerVarF13="", VerVarF14="", VerVarF15="", VerVarF16="", VerVarF17="", VerVarF18="", VerVarF19="", VerVarF20="", VerVarF21="", VerVarF22="", VerVarF23="", VerVarF24="", VerVarF25="", VerVarFOtr="";
        public static String ValorAsigF1="", ValorAsigF2="", ValorAsigF3="", ValorAsigF4="", ValorAsigF5="", ValorAsigF6="", ValorAsigF7="", ValorAsigF8="", ValorAsigF9="", ValorAsigF10="", ValorAsigF11="", ValorAsigF12="", ValorAsigF13="", ValorAsigF14="", ValorAsigF15="", ValorAsigF16="";
        //VARIABLES PARA ALMACENAR PARAMETROS DEL IF
        public static String ValorP1="", ValorP2="", ValorP3="", ValorP4="", ValorP5="", ValorP6="", ValorP7="", ValorP8="", ValorP9="", ValorP10="", ValorP11="", ValorP12="";
        public static String VerVar30 ="", ResulVar1="", ValorIdEcho="", VarIdImp2="", VarNumImp2="";
        //VALORES IF
        public static String ValIF1="", ValIF2="", ValIF3="", ValIF4="", ValIF5="", ValIF6="", ValIF7="", ValIF8="", ValIF9="", ValIF10="", ResultIf1="", ResultIf2="", ResultIf3="", ValInDecIf="";
        //VARIABLES PARA ID+
        public static String cadenaCa ="", cadenaCa2="";
        public static void main(String[] args) throws ParseException{
                try{
                        php analizador = new php(new StringReader("<?php"
                                                                +"include (\u005c"caracteristicas.php\u005c");"
                                                                + "class auto extends caracteristicas{"
                                                                +"var $a;"
                                                                +"function __construct ($a, $b, $c, $d){"
                                                                +"parent ::__construct ($b, $c, $d);"
                                                                +"$this ->a = $a; }"
                                                                +"function imprimir(){"
                                                                +"$a = 5;"
                                                                +"$b = 8.5;"
                                                                +"$c = 10;  $f;"
                                                                +"while (true ){"
                                                                +"if ($a < 10){ $f= 60 + 60;"
                                                                +"break ;}"
                                                                +"-$a; -$b;  echo $a;   echo $b; echo $f;"
                                                                +"echo \u005c"color\u005c" . $this ->b . \u005c" marca \u005c". $this ->c . \u005c" anio \u005c" . $this ->d . \u005c" recorrido \u005c".$this ->a . \u005c" \u005c\u005cn \u005c";"
                                                                +"$a ++;}"
                                                                +"}"
                                                                +"} "
                                                                +"?>"));
                        SimpleNode n = analizador.ProgramaInicio();
                        n.dump("");
                        System.out.println("------Correctamente Analizado------");
                }catch(ParseException e){
                        System.out.println(e.getMessage());
                        System.out.println("**Error Sintactico: Se ha encontrado errores en el Analisis");
                }catch(TokenMgrError e){
                        System.out.println("**Ha ocurrido un Error Lexico");
                        System.out.println(e.getMessage());
                }catch(Exception err){
                        System.out.println(err.getMessage());
                        System.out.println("***Posible Error Semantico");
                        err.printStackTrace();
                }
        }

///INICIO DE GRAMATICA
  final public SimpleNode ProgramaInicio() throws ParseException {
                             /*@bgen(jjtree) ProgramaInicio */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMAINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TAGINICIO);
      label_1:
      while (true) {
        CuerpoPrograma();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SINGLE_LINE_COMMENT:
        case PCLASS:
        case PINCL:
        case DOLAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(TAGFIN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CuerpoPrograma() throws ParseException {
                       /*@bgen(jjtree) CuerpoPrograma */
                       SimpleNode jjtn000 = new SimpleNode(JJTCUERPOPROGRAMA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token T1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_LINE_COMMENT:
        CuerpoComentario();
        break;
      case PCLASS:
      case PINCL:
      case DOLAR:
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PINCL:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          MInclude();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PCLASS:
          Clase();
          break;
        case DOLAR:
          MetodoMain();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void CuerpoComentario() throws ParseException {
                         /*@bgen(jjtree) CuerpoComentario */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCOMENTARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SINGLE_LINE_COMMENT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Clase() throws ParseException {
              /*@bgen(jjtree) Clase */
              SimpleNode jjtn000 = new SimpleNode(JJTCLASE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token T2;
    try {
      jj_consume_token(PCLASS);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PEXT:
        jj_consume_token(PEXT);
        jj_consume_token(ID);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(LLAVEA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PVAR:
      case PFUNCION:
        Constructor();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PVAR:
        case PFUNCION:
        case PECHO:
        case PIF:
        case PSWIT:
        case PWHI:
        case PDO:
        case DOLAR:
        case RESTA:
        case LNOT:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        CuerpoClase();
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoClase() throws ParseException {
                    /*@bgen(jjtree) CuerpoClase */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCLASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CVariables();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void CVariables() throws ParseException {
                   /*@bgen(jjtree) CVariables */
                   SimpleNode jjtn000 = new SimpleNode(JJTCVARIABLES);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token Ids, InDe=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PVAR:
        jj_consume_token(PVAR);
        jj_consume_token(DOLAR);
        Ids = jj_consume_token(ID);
                                  /*propiedad.setNombre(Ids.image);*/ if(Ids.image.equals("a")){VerVar=Ids.image;} if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;}
                                                                                                                           if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;}
                                                                                                                           if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;}
                                                                                                                           if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;}
                                                                                                                           if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;}
                                                                                                                           if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;}
                                                                                                                           if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;}
                                                                                                                           if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;}
                                                                                                                           if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case PUNTOCOMA:
        case ASIG:
          TVariable();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMA);
          jj_consume_token(DOLAR);
          Ids = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IGUAL:
          case PUNTOCOMA:
          case ASIG:
            TVariable();
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
        }
        break;
      case DOLAR:
        jj_consume_token(DOLAR);
        Ids = jj_consume_token(ID);
                             if(Ids.image.equals("a")){VerVar=Ids.image; System.out.println("\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1"+VerVar); } if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;}
                                                                                if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;}
                                                                                if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;}
                                                                                if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;}
                                                                                if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;}
                                                                                if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;}
                                                                                if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;}
                                                                                if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;}
                                                                                if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;}
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case PUNTOCOMA:
        case MAYOR:
        case MENOR:
        case DECR:
        case INC:
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
        case IGUAL2:
        case IDENT:
        case DIFE1:
        case DIFE2:
        case NOIDE:
        case MENORI:
        case MAYORI:
        case LAND:
        case LOR:
        case LXOR:
        case LNOT:
        case LAND2:
        case LOR2:
        case ASIG:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IGUAL:
          case PUNTOCOMA:
          case ASIG:
            TVariable();
            break;
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            OAr();
            jj_consume_token(PUNTOCOMA);
            break;
          case MAYOR:
          case MENOR:
          case IGUAL2:
          case IDENT:
          case DIFE1:
          case DIFE2:
          case NOIDE:
          case MENORI:
          case MAYORI:
            ORe();
            jj_consume_token(PUNTOCOMA);
            break;
          case LAND:
          case LOR:
          case LXOR:
          case LNOT:
          case LAND2:
          case LOR2:
            OLog();
            jj_consume_token(PUNTOCOMA);
            break;
          case DECR:
          case INC:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INC:
              InDe = jj_consume_token(INC);
              break;
            case DECR:
              InDe = jj_consume_token(DECR);
                                                                       Simb = InDe.image;  if(Simb.equals("++")){
                                                                                                                                                                System.out.println("%%%%%%%%%%"+Simb);
                                                                                                                                                                if(VerVar != ""){
                                                                                                                                                                        if(ValorAsig1 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF1 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF1);
                                                                                                                                                                                System.out.println("*********DEC-INC1++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar2 != ""){
                                                                                                                                                                        if(ValorAsig2 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF2 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar3 != ""){
                                                                                                                                                                        if(ValorAsig3 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF3 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar4 != ""){
                                                                                                                                                                        if(ValorAsig4 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF4 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar5 != ""){
                                                                                                                                                                        if(ValorAsig5 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF5 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar6 != ""){
                                                                                                                                                                        if(ValorAsig6 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF6 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar7 != ""){
                                                                                                                                                                        if(ValorAsig7 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF7 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVar8 != ""){
                                                                                                                                                                        if(ValorAsig8 != ""){
                                                                                                                                                                                int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                int RES = variableL + 1;
                                                                                                                                                                                System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }if(ValorAsigF8 != ""){
                                                                                                                                                                                float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                float RES = variableL2 + 1;
                                                                                                                                                                                System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                        }
                                                                                                                                                                }if(VerVarOtr != ""){
                                                                                                                                                                        System.out.println("----------> " +VerVarOtr);
                                                                                                                                                                }
                                                                                                                                }if(Simb.equals("--")){
                                                                                                                                                                        System.out.println("%%%%%%%%%%"+Simb);
                                                                                                                                                                        if(VerVar != ""){
                                                                                                                                                                                if(ValorAsig1 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF1 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF1);
                                                                                                                                                                                        System.out.println("*********DEC-INC1--********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar2 != ""){
                                                                                                                                                                                if(ValorAsig2 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF2 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar3 != ""){
                                                                                                                                                                                if(ValorAsig3 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF3 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar4 != ""){
                                                                                                                                                                                if(ValorAsig4 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF4 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar5 != ""){
                                                                                                                                                                                if(ValorAsig5 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF5 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar6 != ""){
                                                                                                                                                                                if(ValorAsig6 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF6 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar7 != ""){
                                                                                                                                                                                if(ValorAsig7 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                        int RES = variableL - 1;
                                                                                                                                                                                        System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF7 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                        float RES = variableL2 - 1;
                                                                                                                                                                                        System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }if(VerVar8 != ""){
                                                                                                                                                                                if(ValorAsig8 != ""){
                                                                                                                                                                                        int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                        int RES = variableL + 1;
                                                                                                                                                                                        System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }if(ValorAsigF8 != ""){
                                                                                                                                                                                        float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********");
                                                                                                                                                                                        float RES = variableL2 + 1;
                                                                                                                                                                                        System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                }
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(PUNTOCOMA);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMA);
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IGUAL:
          case PUNTOCOMA:
          case ASIG:
            TVariable();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
        }
        break;
      case PFUNCION:
        DecFunction();
        break;
      case RESTA:
        OperacionesArit1();
        break;
      case PECHO:
        Imprimir();
        break;
      case PIF:
        CuerpoIF();
        break;
      case PSWIT:
        SentenciaSW();
        break;
      case PWHI:
        SentenciaWh();
        break;
      case PDO:
        SentenciaDoWh();
        break;
      case LNOT:
        SentenciaFor();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TVariable() throws ParseException {
                  /*@bgen(jjtree) TVariable */
  SimpleNode jjtn000 = new SimpleNode(JJTTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case ASIG:
        AsignacionVar();
        break;
      case PUNTOCOMA:
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AsignacionVar() throws ParseException {
                      /*@bgen(jjtree) AsignacionVar */
                      SimpleNode jjtn000 = new SimpleNode(JJTASIGNACIONVAR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token IdAsgi, ValAsig, ValDecAsig;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMILLASIMPLE:
          jj_consume_token(COMILLASIMPLE);
          IdAsgi = jj_consume_token(ID);
          jj_consume_token(COMILLASIMPLE);
                                                           ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS SIM********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");
          break;
        case PNEW:
          jj_consume_token(PNEW);
          jj_consume_token(ID);
          jj_consume_token(PARA);
          jj_consume_token(PARC);
          break;
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          IdAsgi = jj_consume_token(ID);
          jj_consume_token(COMILLADOBLE);
                                                              ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS DOB********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");
          break;
        case NUM:
          ValAsig = jj_consume_token(NUM);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            OAr();
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
                                             if(ValorAsig16.equals("") && ValorAsig15 != ""){
                                                                        ValorAsig16=ValAsig.image;
                                                                 }if(ValorAsig15.equals("") && ValorAsig14 != ""){
                                                                        ValorAsig15=ValAsig.image;
                                                                 }if(ValorAsig14.equals("") && ValorAsig13 != ""){
                                                                        ValorAsig14=ValAsig.image;
                                                                 }if(ValorAsig13.equals("") && ValorAsig12 != ""){
                                                                        ValorAsig13=ValAsig.image; System.out.println("*********VAR NUM13********");
                                                                 }if(ValorAsig12.equals("") && ValorAsig11 != ""){
                                                                        ValorAsig12=ValAsig.image; System.out.println("*********VAR NUM12********");
                                                                 }if(ValorAsig11.equals("") && ValorAsig10 != ""){
                                                                        ValorAsig11=ValAsig.image; System.out.println("*********VAR NUM11********");
                                                                 }if(ValorAsig10.equals("") && ValorAsig9 != ""){
                                                                        ValorAsig10=ValAsig.image; System.out.println("*********VAR NUM10********");
                                                                 }if(ValorAsig9.equals("") && ValorAsig8 != ""){
                                                                        ValorAsig9=ValAsig.image; System.out.println("*********VAR NUM9********");
                                                                 }if(ValorAsig8.equals("") && ValorAsig7 != ""){
                                                                        ValorAsig8=ValAsig.image;System.out.println("*********VAR NUM8********");
                                                                 }if(ValorAsig7.equals("") && ValorAsig6 != ""){
                                                                        ValorAsig7=ValAsig.image; System.out.println("*********VAR NUM7********");
                                                                 }if(ValorAsig6.equals("") && ValorAsig5 != ""){
                                                                        ValorAsig6=ValAsig.image; System.out.println("*********VAR NUM6********");
                                                                 }if(ValorAsig5.equals("") && ValorAsig4 != ""){
                                                                        ValorAsig5=ValAsig.image; System.out.println("*********VAR NUM5********");
                                                                 }if(ValorAsig4.equals("") && ValorAsig3 != ""){
                                                                        ValorAsig4=ValAsig.image; System.out.println("*********VAR NUM4********");
                                                                 }if(ValorAsig3.equals("") && ValorAsig2 != ""){
                                                                        ValorAsig3=ValAsig.image; System.out.println("*********VAR NUM3********");
                                                                 }if(ValorAsig2.equals("") && ValorAsig1 != ""){
                                                                        ValorAsig2=ValAsig.image; System.out.println("*********VAR NUM2********");
                                                                 }if(ValorAsig1.equals("")){
                                                                        ValorAsig1=ValAsig.image; System.out.println("*********VAR NUM1********");
                                                                 }
                                                            //System.out.println("*********VAR NUM********"); System.out.println(VerVar +" = "+ ValorAsig1);System.out.println("*******************");

          break;
        case DEC:
          ValDecAsig = jj_consume_token(DEC);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            OAr();
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
                                                if(ValorAsigF10.equals("") && ValorAsigF9 != "" /*&& ValorAsig10 != ""*/){
                                                                        ValorAsigF10=ValDecAsig.image; System.out.println("*********VAR FLOAT9********");
                                                                 }if(ValorAsigF9.equals("") && ValorAsigF8 != "" /*&& ValorAsig9 != ""*/){
                                                                        ValorAsigF9=ValDecAsig.image; System.out.println("*********VAR FLOAT8********");
                                                                 }if(ValorAsigF8.equals("") && ValorAsigF7 != "" /*&& ValorAsig8 != ""*/){
                                                                        ValorAsigF8=ValDecAsig.image; System.out.println("*********VAR FLOAT7********");
                                                                 }if(ValorAsigF7.equals("") && ValorAsigF6 != "" /*&& ValorAsig7 != ""*/){
                                                                        ValorAsigF7=ValDecAsig.image; System.out.println("*********VAR FLOAT6********");
                                                                 }if(ValorAsigF6.equals("") && ValorAsigF5 != "" /*&& ValorAsig6 != ""*/){
                                                                        ValorAsigF6=ValDecAsig.image;  System.out.println("*********VAR FLOAT5********");
                                                                 }if(ValorAsigF5.equals("") && ValorAsigF4 != "" /*&& ValorAsig5 != ""*/){
                                                                        ValorAsigF5=ValDecAsig.image; System.out.println("*********VAR FLOAT4********");
                                                                 }if(ValorAsigF4.equals("") && ValorAsigF3 != "" /*&& ValorAsig4 != ""*/){
                                                                        ValorAsigF4=ValDecAsig.image; System.out.println("*********VAR FLOAT3********");
                                                                 }if(ValorAsigF3.equals("") && ValorAsigF2 != "" /*&& ValorAsig3 != ""*/){
                                                                        ValorAsigF3=ValDecAsig.image; System.out.println("*********VAR FLOAT2********");
                                                                 }if(ValorAsigF2.equals("") && ValorAsigF1 != "" /*&& ValorAsig2 != ""*/){
                                                                        ValorAsigF2=ValDecAsig.image; System.out.println("*********VAR FLOAT1********");
                                                                 }if(ValorAsigF1.equals("") /*&& ValorAsig1 != ""*/){
                                                                        ValorAsigF1=ValDecAsig.image; /*System.out.println("&&&&&&& "+ValorAsigF1+"-"+ValDecAsig.image);*/System.out.println("*********VAR FLOAT1********");
                                                                 }
                                                            //System.out.println("*********VAR FLOAT1********"); System.out.println(VerVar2 +" = "+ ValDecAsig.image); System.out.println(VerVar2 +" = "+ ValorAsigF2); System.out.println("*******************");

          break;
        case DOLAR:
          jj_consume_token(DOLAR);
          IdAsgi = jj_consume_token(ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
          case PUNTO:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case POR:
            case SUMA:
            case RESTA:
            case DIV:
            case MOD:
            case POTEN:
              OAr();
              break;
            case PUNTO:
              jj_consume_token(PUNTO);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMILLADOBLE:
                jj_consume_token(COMILLADOBLE);
                jj_consume_token(ID);
                jj_consume_token(COMILLADOBLE);
                break;
              case NUM:
                jj_consume_token(NUM);
                break;
              case DEC:
                jj_consume_token(DEC);
                break;
              default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case ASIG:
        jj_consume_token(ASIG);
        jj_consume_token(ID);
        jj_consume_token(PARA);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMA:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMA);
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
        }
        jj_consume_token(PARC);
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void DecFunction() throws ParseException {
                    /*@bgen(jjtree) DecFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTDECFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PFUNCION);
      jj_consume_token(ID);
      jj_consume_token(PARA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
      case AMP:
        ParametrosFuction();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      CuerpoFunction();
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoFunction() throws ParseException {
                       /*@bgen(jjtree) CuerpoFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PVAR:
      case PFUNCION:
      case PECHO:
      case PIF:
      case PSWIT:
      case PWHI:
      case PDO:
      case DOLAR:
      case RESTA:
      case LNOT:
        label_7:
        while (true) {
          CVariables();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PVAR:
          case PFUNCION:
          case PECHO:
          case PIF:
          case PSWIT:
          case PWHI:
          case PDO:
          case DOLAR:
          case RESTA:
          case LNOT:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_7;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRETURN:
          CuerpoReturn();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
      case PFOR:
        CuerpoMatriz();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

///****DECLARACION DE MATRIZ******
  final public void CuerpoMatriz() throws ParseException {
                     /*@bgen(jjtree) CuerpoMatriz */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOMATRIZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PFOR);
      jj_consume_token(PARA);
      ParametrosFOR();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PFOR:
        jj_consume_token(PFOR);
        jj_consume_token(PARA);
        ParametrosFOR();
        jj_consume_token(PARC);
        jj_consume_token(LLAVEA);
        CuerpoFor();
        jj_consume_token(LLAVEC);
        break;
      case DOLAR:
        CuerpoVecFor();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LLAVEC);
      AsignarMatVect();
      Imprimir();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void ParametrosFOR() throws ParseException {
                      /*@bgen(jjtree) ParametrosFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(IGUAL);
      jj_consume_token(NUM);
      jj_consume_token(PUNTOCOMA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYOR:
        jj_consume_token(MAYOR);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NUM);
      jj_consume_token(PUNTOCOMA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoFor() throws ParseException {
                  /*@bgen(jjtree) CuerpoFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHC);
      jj_consume_token(CORCHA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHC);
      jj_consume_token(IGUAL);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(POR);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(PUNTOCOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoVecFor() throws ParseException {
                     /*@bgen(jjtree) CuerpoVecFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOVECFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHC);
      jj_consume_token(IGUAL);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(PUNTOCOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AsignarMatVect() throws ParseException {
                       /*@bgen(jjtree) AsignarMatVect */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNARMATVECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(CORCHA);
      jj_consume_token(NUM);
      jj_consume_token(CORCHC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORCHA:
        jj_consume_token(CORCHA);
        jj_consume_token(NUM);
        jj_consume_token(CORCHC);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(IGUAL);
      jj_consume_token(NUM);
      jj_consume_token(PUNTOCOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Imprimir() throws ParseException {
                 /*@bgen(jjtree) Imprimir */
                 SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token CIds, VIds1=null, VIds2;
    try {
      jj_consume_token(PECHO);
      jj_consume_token(DOLAR);
      VIds2 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORCHA:
        jj_consume_token(CORCHA);
        jj_consume_token(NUM);
        jj_consume_token(CORCHC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORCHA:
          jj_consume_token(CORCHA);
          jj_consume_token(NUM);
          jj_consume_token(CORCHC);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUNTO:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_8;
          }
          jj_consume_token(PUNTO);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMILLADOBLE:
            jj_consume_token(COMILLADOBLE);
            jj_consume_token(BARRA);
            jj_consume_token(SALTO);
            jj_consume_token(COMILLADOBLE);
            break;
          case DOLAR:
            jj_consume_token(DOLAR);
            VIds1 = jj_consume_token(ID);
                                                                                 ValorIdEcho=VIds1.image;
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(PUNTOCOMA);
                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                jjtc000 = false;
                                                                                                                                               System.out.println("*******ECHO CIds*******");
                                                                                                                                                                                                                                                System.out.println(cadenaCa2); System.out.println("****************");
                                                                                                                                                                                                                                                System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
                                                                                                                                                                                                                                                if(ValorIdEcho.equals("a")){
                                                                                                                                                                                                                                                        System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
                                                                                                                                                                                                                                                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

///*******OPERACIONES ARITMETICAS
  final public void OperacionesArit1() throws ParseException {
                         /*@bgen(jjtree) OperacionesArit1 */
                         SimpleNode jjtn000 = new SimpleNode(JJTOPERACIONESARIT1);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token IdOp1,OperatorMinus;
    try {
      OperatorMinus = jj_consume_token(RESTA);
      jj_consume_token(DOLAR);
      IdOp1 = jj_consume_token(ID);
      jj_consume_token(PUNTOCOMA);
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                            OpeMenosAr= OperatorMinus.image; IdMenosAr=IdOp1.image;
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void OAr() throws ParseException {
            /*@bgen(jjtree) OAr */
            SimpleNode jjtn000 = new SimpleNode(JJTOAR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token OperA; Token OperandA;
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
          OperA = jj_consume_token(POR);
                      OperadorAr=OperA.image;
          break;
        case SUMA:
          OperA = jj_consume_token(SUMA);
                      OperadorAr=OperA.image;
          break;
        case DIV:
          OperA = jj_consume_token(DIV);
                     OperadorAr=OperA.image;
          break;
        case POTEN:
          OperA = jj_consume_token(POTEN);
                       OperadorAr=OperA.image;
          break;
        case MOD:
          OperA = jj_consume_token(MOD);
                     OperadorAr=OperA.image;
          break;
        case RESTA:
          OperA = jj_consume_token(RESTA);
                       OperadorAr=OperA.image;
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLAR:
          jj_consume_token(DOLAR);
          OperandA = jj_consume_token(ID);
                                       OperandoAr=OperandA.image;
          break;
        case NUM:
          OperandA = jj_consume_token(NUM);
                                        OperandoAr=OperandA.image;
          break;
        case DEC:
          OperandA = jj_consume_token(DEC);
                                        OperandoAr=OperandA.image;
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ORe() throws ParseException {
            /*@bgen(jjtree) ORe */
            SimpleNode jjtn000 = new SimpleNode(JJTORE);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token OperR, OperandR;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL2:
        OperR = jj_consume_token(IGUAL2);
                        OperadorRe=OperR.image;
        break;
      case IDENT:
        OperR = jj_consume_token(IDENT);
                       OperadorRe=OperR.image;
        break;
      case DIFE1:
        OperR = jj_consume_token(DIFE1);
                       OperadorRe=OperR.image;
        break;
      case DIFE2:
        OperR = jj_consume_token(DIFE2);
                       OperadorRe=OperR.image;
        break;
      case NOIDE:
        OperR = jj_consume_token(NOIDE);
                       OperadorRe=OperR.image;
        break;
      case MENOR:
        OperR = jj_consume_token(MENOR);
                       OperadorRe=OperR.image;
        break;
      case MAYOR:
        OperR = jj_consume_token(MAYOR);
                       OperadorRe=OperR.image;
        break;
      case MENORI:
        OperR = jj_consume_token(MENORI);
                        OperadorRe=OperR.image;
        break;
      case MAYORI:
        OperR = jj_consume_token(MAYORI);
                        OperadorRe=OperR.image;
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        OperandR = jj_consume_token(ID);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      OperandoRe =OperandR.image;
        break;
      case NUM:
        OperandR = jj_consume_token(NUM);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                           OperandoRe =OperandR.image;
        break;
      case DEC:
        OperandR = jj_consume_token(DEC);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                           OperandoRe =OperandR.image;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void OLog() throws ParseException {
             /*@bgen(jjtree) OLog */
             SimpleNode jjtn000 = new SimpleNode(JJTOLOG);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token OperL, OperandL;
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          OperL = jj_consume_token(LAND);
                       OperadorLo=OperL.image;
          break;
        case LOR:
          OperL = jj_consume_token(LOR);
                      OperadorLo=OperL.image;
          break;
        case LXOR:
          OperL = jj_consume_token(LXOR);
                       OperadorLo=OperL.image;
          break;
        case LNOT:
          OperL = jj_consume_token(LNOT);
                       OperadorLo=OperL.image;
          break;
        case LAND2:
          OperL = jj_consume_token(LAND2);
                        OperadorLo=OperL.image;
          break;
        case LOR2:
          OperL = jj_consume_token(LOR2);
                       OperadorLo=OperL.image;
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOLAR);
        OperandL = jj_consume_token(ID);
                                  OperandoLo=OperandL.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
        case LOR:
        case LXOR:
        case LNOT:
        case LAND2:
        case LOR2:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_11;
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParametrosFuction() throws ParseException {
                          /*@bgen(jjtree) ParametrosFuction */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSFUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
        jj_consume_token(AMP);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AMP:
          jj_consume_token(AMP);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoReturn() throws ParseException {
                     /*@bgen(jjtree) CuerpoReturn */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPORETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRETURN);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(PUNTOCOMA);
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Constructor() throws ParseException {
                    /*@bgen(jjtree) Constructor */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PVAR:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_13;
        }
        jj_consume_token(PVAR);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        TVariable();
      }
      jj_consume_token(PFUNCION);
      jj_consume_token(GUIONB);
      jj_consume_token(GUIONB);
      jj_consume_token(PCONST);
      jj_consume_token(PARA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
      case AMP:
        ParametrosFuction();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      label_14:
      while (true) {
        CuerpoConstructor();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PECHO:
        case PPARENT:
        case PTHIS:
        case DOLAR:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_14;
        }
      }
      jj_consume_token(LLAVEC);
                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                   jjtc000 = false;
                                                                                                                  System.out.println("*******ECHO CONST*******"); System.out.println(cadenaCa); System.out.println("****************");
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoConstructor() throws ParseException {
                          /*@bgen(jjtree) CuerpoConstructor */
                          SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCONSTRUCTOR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token IdsCons;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PPARENT:
        MetParent();
        break;
      case PECHO:
        jj_consume_token(PECHO);
        jj_consume_token(COMILLADOBLE);
        label_15:
        while (true) {
          IdsCons = jj_consume_token(ID);
                                            cadenaCa= cadenaCa + IdsCons.image +" ";
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_15;
          }
        }
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(PUNTOCOMA);
        break;
      case DOLAR:
        jj_consume_token(DOLAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(ID);
          jj_consume_token(IGUAL);
          jj_consume_token(PNEW);
          jj_consume_token(ID);
          jj_consume_token(PARA);
          jj_consume_token(PARC);
          break;
        case PTHIS:
          jj_consume_token(PTHIS);
          jj_consume_token(ASIG);
          jj_consume_token(ID);
          jj_consume_token(IGUAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            jj_consume_token(NUM);
            break;
          case DEC:
            jj_consume_token(DEC);
            break;
          case PNULL:
            jj_consume_token(PNULL);
            break;
          case DOLAR:
            jj_consume_token(DOLAR);
            jj_consume_token(ID);
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case PTHIS:
        MetThis();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void MInclude() throws ParseException {
                 /*@bgen(jjtree) MInclude */
  SimpleNode jjtn000 = new SimpleNode(JJTMINCLUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PINCL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
        jj_consume_token(PARA);
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(PUNTO);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(PARC);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(PUNTO);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MetParent() throws ParseException {
                  /*@bgen(jjtree) MetParent */
  SimpleNode jjtn000 = new SimpleNode(JJTMETPARENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PPARENT);
      jj_consume_token(DOBLEP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUIONB:
        jj_consume_token(GUIONB);
        jj_consume_token(GUIONB);
        jj_consume_token(PCONST);
        jj_consume_token(PARA);
        ParametrosFuction();
        jj_consume_token(PARC);
        break;
      case ID:
        jj_consume_token(ID);
        jj_consume_token(PARA);
        jj_consume_token(PARC);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MetThis() throws ParseException {
                /*@bgen(jjtree) MetThis */
  SimpleNode jjtn000 = new SimpleNode(JJTMETTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PTHIS);
      jj_consume_token(ASIG);
      jj_consume_token(ID);
      jj_consume_token(IGUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        jj_consume_token(NUM);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      case COMILLASIMPLE:
        jj_consume_token(COMILLASIMPLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLASIMPLE);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//*****************SENTENCIAS IF*******************************
  final public void CuerpoIF() throws ParseException {
                 /*@bgen(jjtree) CuerpoIF */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PIF);
      jj_consume_token(PARA);
      ParametrosIF();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      label_16:
      while (true) {
        SentenciasIF();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
        case PCONTI:
        case DOLAR:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_16;
        }
      }
      jj_consume_token(LLAVEC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PELSE:
        jj_consume_token(PELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIF:
          Elseifs();
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
        jj_consume_token(LLAVEA);
        label_17:
        while (true) {
          SentenciasIF();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PBREAK:
          case PCONTI:
          case DOLAR:
            ;
            break;
          default:
            jj_la1[60] = jj_gen;
            break label_17;
          }
        }
        jj_consume_token(LLAVEC);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Elseifs() throws ParseException {
                /*@bgen(jjtree) Elseifs */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEIFS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_18:
      while (true) {
        jj_consume_token(PIF);
        jj_consume_token(PARA);
        ParametrosIF();
        jj_consume_token(PARC);
        jj_consume_token(LLAVEA);
        label_19:
        while (true) {
          SentenciasIF();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PBREAK:
          case PCONTI:
          case DOLAR:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_19;
          }
        }
        jj_consume_token(LLAVEC);
        jj_consume_token(PELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIF:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_18;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParametrosIF() throws ParseException {
                     /*@bgen(jjtree) ParametrosIF */
                     SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSIF);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token IdParam1, IdParam2, NumParam1, DecParam1,IdParam3, IdParam4;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        IdParam1 = jj_consume_token(ID);
        ORe2();
                                     ValorP1= IdParam1.image;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLAR:
          jj_consume_token(DOLAR);
          IdParam2 = jj_consume_token(ID);
                                             ValorP2= IdParam2.image;
          break;
        case NUM:
          NumParam1 = jj_consume_token(NUM);
                                          ValorP3= NumParam1.image;
          break;
        case DEC:
          DecParam1 = jj_consume_token(DEC);
                                          ValorP4= DecParam1.image;
          break;
        case COMILLASIMPLE:
          jj_consume_token(COMILLASIMPLE);
          IdParam3 = jj_consume_token(ID);
          jj_consume_token(COMILLASIMPLE);
                                                                      ValorP5= IdParam3.image;
          break;
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          IdParam4 = jj_consume_token(ID);
          jj_consume_token(COMILLADOBLE);
                                                                   ValorP6= IdParam4.image;
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                              if(ValorP1 != ""){
                                                                                                                                                                        if(ValorP2 != ""){
                                                                                                                                                                                if(OperadorRe2.equals("==")){
                                                                                                                                                                                        if(ValorAsig1.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        }if(ValorP3 != ""){ //PARA NUMEROS ENTEROS
                                                                                                                                                                                if(OperadorRe2.equals("==")){
                                                                                                                                                                                        if(ValorAsig1.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig2.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig3.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig4.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig5.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig6.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig7.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig8.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig9.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig10.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig11.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig12.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }if(ValorAsig13.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
                                                                                                                                                                                        }
                                                                                                                                                                                }if(OperadorRe2.equals("!=")){
                                                                                                                                                                                        if(Integer.parseInt(ValorAsig1) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig2) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig3) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig4) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig5) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig6) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig7) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig8) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig9) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig10) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig11) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig12) != Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
                                                                                                                                                                                        }
                                                                                                                                                                                }if(OperadorRe2.equals("<")){
                                                                                                                                                                                        if(Integer.parseInt(ValorAsig1) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig2) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig3) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig4) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig5) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig6) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig7) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig8) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig9) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig10) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig11) < Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
                                                                                                                                                                                        }
                                                                                                                                                                                }if(OperadorRe2.equals(">")){
                                                                                                                                                                                        if(Integer.parseInt(ValorAsig1) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig2) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig3) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig4) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig5) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig6) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig7) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig8) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig9) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig10) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig11) > Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
                                                                                                                                                                                        }
                                                                                                                                                                                }if(OperadorRe2.equals("<=")){
                                                                                                                                                                                        if(Integer.parseInt(ValorAsig1) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig2) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig3) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig4) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig5) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig6) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig7) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig8) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig9) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig10) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig11) <= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
                                                                                                                                                                                        }
                                                                                                                                                                                }if(OperadorRe2.equals(">=")){
                                                                                                                                                                                        if(Integer.parseInt(ValorAsig1) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig2) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig3) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig4) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig5) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig6) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig7) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig8) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig9) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig10) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }if(Integer.parseInt(ValorAsig11) >= Integer.parseInt(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        }/*if(ValorP4 != ""){   //PARA NUMEROS DECIMALES
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsigF1.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF2.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF3.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF4.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF5.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF6.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF7.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF8.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF9.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF10.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF11.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF12.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("!=")){
		      																					if(Float.parseFloat(ValorAsigF1) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF2) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF3) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF4) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF5) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF6) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF7) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF8) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF9) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF10) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}
		      																				}if(OperadorRe2.equals("<")){
		      																					if(Float.parseFloat(ValorAsigF1) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF2) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF3) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF4) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF5) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF6) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF7) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF8) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF9) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF10) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF11) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}
		      																				}if(OperadorRe2.equals(">")){
		      																					if(Float.parseFloat(ValorAsigF1) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF2) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF3) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF4) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF5) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF6) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF7) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF8) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF9) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF10) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}
		      																				}if(OperadorRe2.equals("<=")){
		      																					if(Float.parseFloat(ValorAsigF1) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF2) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF3) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF4) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF5) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF6) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF7) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF8) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF9) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF10) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}
		      																				}if(OperadorRe2.equals(">=")){
		      																					if(Float.parseFloat(ValorAsigF1) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF2) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF3) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF4) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF5) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF6) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF7) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF8) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF9) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF10) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}
		      																				}
		      																			}*/if(ValorP5 != ""){
                                                                                                                                                                                if(OperadorRe2.equals("==")){
                                                                                                                                                                                        if(ValorAsig1.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        }if(ValorP6 != ""){
                                                                                                                                                                                if(OperadorRe2.equals("==")){
                                                                                                                                                                                        if(ValorAsig1.equals(ValorP3)){
                                                                                                                                                                                                System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                                                 }
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LAND:
          case LOR:
          case LXOR:
          case LNOT:
          case LAND2:
          case LOR2:
            ;
            break;
          default:
            jj_la1[65] = jj_gen;
            break label_20;
          }
          OLog2();
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          ORe2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOLAR:
            jj_consume_token(DOLAR);
            jj_consume_token(ID);
            break;
          case NUM:
            jj_consume_token(NUM);
            break;
          case DEC:
            jj_consume_token(DEC);
            break;
          case COMILLASIMPLE:
            jj_consume_token(COMILLASIMPLE);
            jj_consume_token(ID);
            jj_consume_token(COMILLASIMPLE);
            break;
          case COMILLADOBLE:
            jj_consume_token(COMILLADOBLE);
            jj_consume_token(ID);
            jj_consume_token(COMILLADOBLE);
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case PTRUE:
        jj_consume_token(PTRUE);
        break;
      case PFALSE:
        jj_consume_token(PFALSE);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NotParametros() throws ParseException {
                      /*@bgen(jjtree) NotParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LNOT);
      jj_consume_token(PARA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      ORe2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      case COMILLASIMPLE:
        jj_consume_token(COMILLASIMPLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLASIMPLE);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ORe2() throws ParseException {
             /*@bgen(jjtree) ORe2 */
             SimpleNode jjtn000 = new SimpleNode(JJTORE2);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token OperadorR2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL2:
        OperadorR2 = jj_consume_token(IGUAL2);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              OperadorRe2=OperadorR2.image;
        break;
      case IDENT:
        OperadorR2 = jj_consume_token(IDENT);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case DIFE1:
        OperadorR2 = jj_consume_token(DIFE1);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case DIFE2:
        OperadorR2 = jj_consume_token(DIFE2);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case NOIDE:
        OperadorR2 = jj_consume_token(NOIDE);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case MENOR:
        OperadorR2 = jj_consume_token(MENOR);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case MAYOR:
        OperadorR2 = jj_consume_token(MAYOR);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorRe2=OperadorR2.image;
        break;
      case MENORI:
        OperadorR2 = jj_consume_token(MENORI);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              OperadorRe2=OperadorR2.image;
        break;
      case MAYORI:
        OperadorR2 = jj_consume_token(MAYORI);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              OperadorRe2=OperadorR2.image;
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void OLog2() throws ParseException {
              /*@bgen(jjtree) OLog2 */
              SimpleNode jjtn000 = new SimpleNode(JJTOLOG2);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token OperadorL2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
        OperadorL2 = jj_consume_token(LAND);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            OperadorLo2 =OperadorL2.image;
        break;
      case LOR:
        OperadorL2 = jj_consume_token(LOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           OperadorLo2 =OperadorL2.image;
        break;
      case LXOR:
        OperadorL2 = jj_consume_token(LXOR);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            OperadorLo2 =OperadorL2.image;
        break;
      case LNOT:
        OperadorL2 = jj_consume_token(LNOT);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            OperadorLo2 =OperadorL2.image;
        break;
      case LAND2:
        OperadorL2 = jj_consume_token(LAND2);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorLo2 =OperadorL2.image;
        break;
      case LOR2:
        OperadorL2 = jj_consume_token(LOR2);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            OperadorLo2 =OperadorL2.image;
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void OAr2() throws ParseException {
             /*@bgen(jjtree) OAr2 */
             SimpleNode jjtn000 = new SimpleNode(JJTOAR2);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token OperadorA2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        OperadorA2 = jj_consume_token(POR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           OperadorAr2 = OperadorA2.image;
        break;
      case SUMA:
        OperadorA2 = jj_consume_token(SUMA);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            OperadorAr2 = OperadorA2.image;
        break;
      case DIV:
        OperadorA2 = jj_consume_token(DIV);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           OperadorAr2 = OperadorA2.image;
        break;
      case POTEN:
        OperadorA2 = jj_consume_token(POTEN);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorAr2 = OperadorA2.image;
        break;
      case MOD:
        OperadorA2 = jj_consume_token(MOD);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           OperadorAr2 = OperadorA2.image;
        break;
      case RESTA:
        OperadorA2 = jj_consume_token(RESTA);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             OperadorAr2 = OperadorA2.image;
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SentenciasIF() throws ParseException {
                     /*@bgen(jjtree) SentenciasIF */
                     SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIASIF);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token IdIf1, IdIf2, IdIf3, IdIf4, IdIf5=null, NumIf1=null, DecIf1=null, NumIf2=null, DecIf2=null, InDecIf, NumIf3, DecIf3, NumIf4 =null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        IdIf1 = jj_consume_token(ID);
        jj_consume_token(IGUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          NumIf1 = jj_consume_token(NUM);
          break;
        case DEC:
          DecIf1 = jj_consume_token(DEC);
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_21;
          }
          OAr2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            NumIf2 = jj_consume_token(NUM);
            break;
          case DEC:
            DecIf2 = jj_consume_token(DEC);
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(PUNTOCOMA);
                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                  jjtc000 = false;
                                                                                                                 if(OperadorAr2.equals("+")){
                                                                                                                                                                                                                                if(NumIf1.image != "" && NumIf2.image != "" /*&& DecIf2.image.equals("") && DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        int ResuFin = Integer.parseInt(NumIf1.image) + Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT1**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(NumIf1.image != "" /*&& NumIf2.image.equals("") */&& DecIf2.image != "" /*&& DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        float ResuFin = Integer.parseInt(NumIf1.image) + Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT2**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&*/ NumIf2.image != "" /*&& DecIf2.image.equals("")*/ && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) + Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT3**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&  NumIf2.image.equals("") &&*/ DecIf2.image != "" && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) + Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT4**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }if(OperadorAr2.equals("-")){
                                                                                                                                                                                                                                if(NumIf1.image != "" && NumIf2.image != "" /*&& DecIf2.image.equals("") && DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        int ResuFin = Integer.parseInt(NumIf1.image) - Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT1**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(NumIf1.image != "" /*&& NumIf2.image.equals("")*/ && DecIf2.image != "" /*&& DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        float ResuFin = Integer.parseInt(NumIf1.image) - Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT2**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&*/ NumIf2.image != "" /*&& DecIf2.image.equals("")*/ && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) - Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT3**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&  NumIf2.image.equals("") &&*/ DecIf2.image != "" && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) - Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT4**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }if(OperadorAr2.equals("*")){
                                                                                                                                                                                                                                if(NumIf1.image != "" && NumIf2.image != "" /*&& DecIf2.image.equals("") && DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        int ResuFin = Integer.parseInt(NumIf1.image) * Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT1**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(NumIf1.image != "" /*&& NumIf2.image.equals("")*/ && DecIf2.image != "" /*&& DecIf1.image.equals("")*/){
                                                                                                                                                                                                                                        float ResuFin = Integer.parseInt(NumIf1.image) * Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT2**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&*/ NumIf2.image != "" /*&& DecIf2.image.equals("")*/ && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) * Integer.parseInt(NumIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT3**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }if(/*NumIf1.image.equals("") &&  NumIf2.image.equals("") &&*/ DecIf2.image != "" && DecIf1.image != ""){
                                                                                                                                                                                                                                        float ResuFin = Float.parseFloat(DecIf1.image) * Float.parseFloat(DecIf2.image);
                                                                                                                                                                                                                                        System.out.println("*****RESULT4**** " + ResuFin +" ******");
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                        }
        break;
      case PBREAK:
      case PCONTI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
          jj_consume_token(PBREAK);
          break;
        case PCONTI:
          jj_consume_token(PCONTI);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//**************SENTENCIA SWITCH******************
  final public void SentenciaSW() throws ParseException {
                    /*@bgen(jjtree) SentenciaSW */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIASW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PSWIT);
      jj_consume_token(PARA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      label_22:
      while (true) {
        SentCase();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PCASE:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_22;
        }
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SentCase() throws ParseException {
                 /*@bgen(jjtree) SentCase */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PCASE);
      jj_consume_token(NUM);
      jj_consume_token(DOSP);
      CuerpoCase();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PDEFAULT:
        jj_consume_token(PDEFAULT);
        jj_consume_token(DOSP);
        CuerpoCase();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoCase() throws ParseException {
                   /*@bgen(jjtree) CuerpoCase */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PECHO:
        Imprimir2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
        case PCONTI:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PBREAK:
            jj_consume_token(PBREAK);
            break;
          case PCONTI:
            jj_consume_token(PCONTI);
            break;
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(PUNTOCOMA);
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        break;
      case PBREAK:
      case PCONTI:
      case DOLAR:
        SentenciasIF();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
        case PCONTI:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PBREAK:
            jj_consume_token(PBREAK);
            break;
          case PCONTI:
            jj_consume_token(PCONTI);
            break;
          default:
            jj_la1[81] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(PUNTOCOMA);
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        break;
      case PIF:
        CuerpoIF();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Imprimir2() throws ParseException {
                  /*@bgen(jjtree) Imprimir2 */
                  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR2);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token IdsImp2; Token NumImp2;
    try {
      jj_consume_token(PECHO);
      jj_consume_token(COMILLADOBLE);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case ID:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          IdsImp2 = jj_consume_token(ID);
                                             VarIdImp2 = VarIdImp2 + IdsImp2.image;
          break;
        case NUM:
          NumImp2 = jj_consume_token(NUM);
                                                                VarNumImp2 = VarNumImp2 + NumImp2.image;
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(COMILLADOBLE);
      jj_consume_token(PUNTOCOMA);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                   System.out.println("**************"); System.out.println(VarIdImp2+"-No."+VarNumImp2); System.out.println("**************");
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//*****************SENTENCIA WHILE******************************
  final public void SentenciaWh() throws ParseException {
                    /*@bgen(jjtree) SentenciaWh */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAWH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PWHI);
      jj_consume_token(PARA);
      ParametrosIF();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      label_24:
      while (true) {
        CuerpoWh();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PECHO:
        case PIF:
        case PSWIT:
        case PBREAK:
        case PCONTI:
        case DOLAR:
        case RESTA:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_24;
        }
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoWh() throws ParseException {
                 /*@bgen(jjtree) CuerpoWh */
                 SimpleNode jjtn000 = new SimpleNode(JJTCUERPOWH);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token IdIm1, IdIm2, IdIm3, IdIm4, IdIm5;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PECHO:
        jj_consume_token(PECHO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLAR:
          jj_consume_token(DOLAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            IdIm1 = jj_consume_token(ID);
                                     if(OpeMenosAr !="" && IdMenosAr !=""){
                                                                        ValorIdCWh = IdIm1.image;
                                                                        if(ValorIdCWh.equals(IdMenosAr)){
                                                                                if(ValorAsig1 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig1);
                                                                                        System.out.println("*******-$ID1*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig2 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig2);
                                                                                        System.out.println("*******-$ID2*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig3 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig3);
                                                                                        System.out.println("*******-$ID3*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig4 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig4);
                                                                                        System.out.println("*******-$ID4*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig5 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig5);
                                                                                        System.out.println("*******-$ID5*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig6 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig6);
                                                                                        System.out.println("*******-$ID6*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig7 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig7);
                                                                                        System.out.println("*******-$ID7*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsig8 != ""){
                                                                                        int resultadoOp1 = 0- Integer.parseInt(ValorAsig8);
                                                                                        System.out.println("*******-$ID8*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }
                                                                                //PARA VALORES DECIMALES
                                                                                if(ValorAsigF1 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF1);
                                                                                        System.out.println("*******-$ID1*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF2 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF2);
                                                                                        System.out.println("*******-$ID2*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF3 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF3);
                                                                                        System.out.println("*******-$ID3*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF4 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF4);
                                                                                        System.out.println("*******-$ID4*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF5 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF5);
                                                                                        System.out.println("*******-$ID5*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF6 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF6);
                                                                                        System.out.println("*******-$ID6*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF7 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF7);
                                                                                        System.out.println("*******-$ID7*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }if(ValorAsigF8 != ""){
                                                                                        float resultadoOp1 = 0- Float.parseFloat(ValorAsigF8);
                                                                                        System.out.println("*******-$ID8*********");
                                                                                        System.out.println(resultadoOp1);System.out.println("********************");
                                                                                }
                                                                        }
                                                                }
            break;
          case PTHIS:
            jj_consume_token(PTHIS);
            jj_consume_token(ASIG);
            IdIm2 = jj_consume_token(ID);
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          IdIm3 = jj_consume_token(ID);
          jj_consume_token(COMILLADOBLE);
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PUNTO:
              ;
              break;
            default:
              jj_la1[88] = jj_gen;
              break label_25;
            }
            jj_consume_token(PUNTO);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMILLADOBLE:
              jj_consume_token(COMILLADOBLE);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ID:
                IdIm4 = jj_consume_token(ID);
                break;
              case BARRA:
                jj_consume_token(BARRA);
                jj_consume_token(SALTO);
                break;
              default:
                jj_la1[89] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(COMILLADOBLE);
              break;
            case DOLAR:
              jj_consume_token(DOLAR);
              jj_consume_token(PTHIS);
              jj_consume_token(ASIG);
              IdIm5 = jj_consume_token(ID);
              break;
            default:
              jj_la1[90] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          OAr();
          break;
        case DECR:
        case INC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INC:
            jj_consume_token(INC);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case PBREAK:
      case PCONTI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
          jj_consume_token(PBREAK);
          break;
        case PCONTI:
          jj_consume_token(PCONTI);
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case PIF:
        CuerpoIF();
        break;
      case RESTA:
        OperacionesArit1();
        break;
      case PSWIT:
        SentenciaSW();
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//***************SENTENCIA DO WHILE*****************************
  final public void SentenciaDoWh() throws ParseException {
                      /*@bgen(jjtree) SentenciaDoWh */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIADOWH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PDO);
      jj_consume_token(LLAVEA);
      label_26:
      while (true) {
        CuerpoWh();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PECHO:
        case PIF:
        case PSWIT:
        case PBREAK:
        case PCONTI:
        case DOLAR:
        case RESTA:
          ;
          break;
        default:
          jj_la1[96] = jj_gen;
          break label_26;
        }
      }
      jj_consume_token(LLAVEC);
      jj_consume_token(PWHI);
      jj_consume_token(PARA);
      ParametrosIF();
      jj_consume_token(PARC);
      jj_consume_token(PUNTOCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SentenciaFor() throws ParseException {
                     /*@bgen(jjtree) SentenciaFor */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LNOT);
      jj_consume_token(PFOR);
      jj_consume_token(PARA);
      ParametrosFOR();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      label_27:
      while (true) {
        CuerpoFor2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PECHO:
        case PIF:
        case PSWIT:
        case PBREAK:
        case PWHI:
        case PCONTI:
        case DOLAR:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_27;
        }
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CuerpoFor2() throws ParseException {
                   /*@bgen(jjtree) CuerpoFor2 */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        jj_consume_token(IGUAL);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            ;
            break;
          default:
            jj_la1[98] = jj_gen;
            break label_28;
          }
          OAr2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOLAR:
            jj_consume_token(DOLAR);
            jj_consume_token(ID);
            break;
          case NUM:
            jj_consume_token(NUM);
            break;
          case DEC:
            jj_consume_token(DEC);
            break;
          default:
            jj_la1[99] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case PECHO:
        Imprimir();
        break;
      case PBREAK:
      case PCONTI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
          jj_consume_token(PBREAK);
          break;
        case PCONTI:
          jj_consume_token(PCONTI);
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      case PIF:
        CuerpoIF();
        break;
      case PSWIT:
        SentenciaSW();
        break;
      case PWHI:
        SentenciaWh();
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MetodoMain() throws ParseException {
                   /*@bgen(jjtree) MetodoMain */
  SimpleNode jjtn000 = new SimpleNode(JJTMETODOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        jj_consume_token(PNEW);
        jj_consume_token(ID);
        jj_consume_token(PARA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case ID:
        case DEC:
        case COMILLADOBLE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            jj_consume_token(NUM);
            break;
          case ID:
            jj_consume_token(ID);
            break;
          case DEC:
          case COMILLADOBLE:
            ParametrosMain();
            break;
          default:
            jj_la1[102] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[103] = jj_gen;
          ;
        }
        jj_consume_token(PARC);
        break;
      case ASIG:
        jj_consume_token(ASIG);
        jj_consume_token(ID);
        jj_consume_token(PARA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case ID:
        case DOLAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            jj_consume_token(NUM);
            break;
          case ID:
            jj_consume_token(ID);
            break;
          case DOLAR:
            jj_consume_token(DOLAR);
            jj_consume_token(ID);
            jj_consume_token(ASIG);
            jj_consume_token(ID);
            break;
          default:
            jj_la1[104] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[105] = jj_gen;
          ;
        }
        jj_consume_token(PARC);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParametrosMain() throws ParseException {
                       /*@bgen(jjtree) ParametrosMain */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        jj_consume_token(NUM);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_29;
        }
        jj_consume_token(COMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case DEC:
          jj_consume_token(DEC);
          break;
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          jj_consume_token(ID);
          jj_consume_token(COMILLADOBLE);
          break;
        default:
          jj_la1[109] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  /** Generated Token Manager. */
  public phpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[110];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4040200,0x4000000,0x40000,0x4040200,0x20000000,0x180000,0x40580000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40580000,0x0,0x0,0x0,0x4400,0x0,0x0,0x1004400,0x0,0x0,0x0,0x40580000,0x800000,0x40780000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x4400,0x0,0x0,0x4400,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x18400000,0x800,0x4400,0x10000800,0x18400000,0x0,0x800,0x4400,0x0,0x40000000,0x0,0x80000000,0x0,0x40000000,0x4400,0x0,0x4400,0x0,0x4400,0x0,0x0,0x0,0x4400,0x0,0x4400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40400000,0xc00,0xc00,0x40400000,0x10000800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x40400000,0x40400000,0x40400000,0x0,0x4400,0x0,0x40400000,0x4c00,0x4c00,0xc00,0xc00,0x0,0x4400,0x0,0x4400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x0,0x8000,0x8000,0x0,0x0,0x10008032,0x3000,0x4000,0x3000,0xc00000,0xfcf03000,0xfcf03000,0x4000,0x3000,0x10008032,0x3000,0xfc000000,0xfc000000,0x20000,0xfc000000,0xfc000000,0x38000,0x4000,0x1000,0x8000,0x10008032,0x0,0x10008032,0x8000,0x300000,0xc00000,0x1000000,0x1000000,0x0,0x28000,0x0,0x1000000,0xfc000000,0x8000,0xfc000000,0x300000,0x8000,0x0,0x0,0x0,0x4000,0x0,0x0,0x8000,0x8000,0x0,0x8080,0x0,0x8000,0x60000,0x0,0x30000,0x8044,0x0,0x8044,0x0,0x8044,0x0,0x38000,0x0,0x38000,0x8300,0x38000,0x300000,0x0,0xfc000000,0x0,0xfc000000,0x0,0x44,0x8044,0x1,0x8,0x44,0x44,0x44,0x44,0x8044,0x0,0x0,0x10008046,0x0,0x0,0x0,0x28000,0x28000,0xc00000,0xc01000,0x44,0x10008046,0x10008046,0x8056,0xfc000000,0x8000,0x44,0x8056,0x20000,0x20000,0x8000,0x8000,0x1000,0x20000,0x4000,0x20000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x4000,0x0,0x4000,0x0,0x5fff,0x5fff,0x0,0x4000,0x400,0x4000,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x4000,0x2000,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x0,0x1f80,0x1f80,0x2000,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f80,0x0,0x0,0x0,0x7f,0x1f80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public php(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public php(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public php(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public php(phpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(phpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[85];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 110; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 85; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
