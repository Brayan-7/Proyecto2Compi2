/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options {
	IGNORE_CASE = true;
	STATIC = false;
	ERROR_REPORTING = true;
}

PARSER_BEGIN(php)

package jjt;

import java.util.*;
import servidor_fileversion.Propiedades;
import servidor_fileversion.TablaSimbolos;
import java.io.StringReader;

public class php/*@bgen(jjtree)*/implements phpTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTphpState jjtree = new JJTphpState();

/*@egen*/
	public Propiedades propiedad = new Propiedades();
	public TablaSimbolos TS = new TablaSimbolos();
	///Variables NORMALES
	public static String OperadorAr="", OperandoAr="", OperadorRe="", OperandoRe="", OperadorLo="", OperandoLo="", OperadorRe2="", OperadorAr2="", OperadorLo2="", OpeMenosAr="", IdMenosAr="", ValorIdCWh="";
	//NUMEROS ENTEROS
	public static String VerVar="" ,VerVar2="",VerVar3="",VerVar4="",VerVar5="",VerVar6="",VerVar7="",VerVar8="",VerVar9="",VerVar10="", VerVar11="" ,VerVar12="",VerVar13="",VerVar14="",VerVar15="",VerVar16="",VerVar17="",VerVar18="",VerVar19="",VerVar20="",VerVar21="",VerVar22="",VerVar23="",VerVar24="",VerVar25="", VerVarOtr="";
	public static String ValorAsig1="", ValorAsig2="", ValorAsig3="", ValorAsig4="", ValorAsig5="", ValorAsig6="", ValorAsig7="", ValorAsig8="", ValorAsig9="", ValorAsig10="", ValorAsig11="", ValorAsig12="", ValorAsig13="", ValorAsig14="", ValorAsig15="", ValorAsig16="",Simb="";
	//NUMEROS PUNTO FLOTANTE
	//public static String VerVarF="" ,VerVarF2="",VerVarF3="",VerVarF4="",VerVarF5="",VerVarF6="",VerVarF7="",VerVarF8="",VerVarF9="",VerVarF10="", VerVarF11="", VerVarF12="", VerVarF13="", VerVarF14="", VerVarF15="", VerVarF16="", VerVarF17="", VerVarF18="", VerVarF19="", VerVarF20="", VerVarF21="", VerVarF22="", VerVarF23="", VerVarF24="", VerVarF25="", VerVarFOtr="";
	public static String ValorAsigF1="", ValorAsigF2="", ValorAsigF3="", ValorAsigF4="", ValorAsigF5="", ValorAsigF6="", ValorAsigF7="", ValorAsigF8="", ValorAsigF9="", ValorAsigF10="", ValorAsigF11="", ValorAsigF12="", ValorAsigF13="", ValorAsigF14="", ValorAsigF15="", ValorAsigF16="";
	//VARIABLES PARA ALMACENAR PARAMETROS DEL IF
	public static String ValorP1="", ValorP2="", ValorP3="", ValorP4="", ValorP5="", ValorP6="", ValorP7="", ValorP8="", ValorP9="", ValorP10="", ValorP11="", ValorP12="";
	public static String VerVar30 ="", ResulVar1="", ValorIdEcho="", VarIdImp2="", VarNumImp2="";
	//VALORES IF
	public static String ValIF1="", ValIF2="", ValIF3="", ValIF4="", ValIF5="", ValIF6="", ValIF7="", ValIF8="", ValIF9="", ValIF10="", ResultIf1="", ResultIf2="", ResultIf3="", ValInDecIf="";
	//VARIABLES PARA ID+
	public static String cadenaCa ="", cadenaCa2="";
	public static void main(String[] args) throws ParseException{
		try{
			php analizador = new php(new StringReader("<?php"
								+"include (\"caracteristicas.php\");"
								+ "class auto extends caracteristicas{"
								+"var $a;"
								+"function __construct ($a, $b, $c, $d){"
								+"parent ::__construct ($b, $c, $d);"
								+"$this ->a = $a; }"
								+"function imprimir(){"
								+"$a = 5;"
								+"$b = 8.5;"
								+"$c = 10;  $f;"
								+"while (true ){"
								+"if ($a != 5.5){ $f= 60 + 60;"
								+"break ;}"
								+"-$a; -$b;  echo $a;   echo $b; echo $f;"
								+"echo \"color\" . $this ->b . \" marca \". $this ->c . \" anio \" . $this ->d . \" recorrido \".$this ->a . \" \\n \";"
								+"$a ++;}"
								+"}"
								+"} "
								+"?>"));
			SimpleNode n = analizador.ProgramaInicio();
			n.dump("");
			System.out.println("------Correctamente Analizado------");
		}catch(ParseException e){
			System.out.println(e.getMessage());
			System.out.println("**Error Sintactico: Se ha encontrado errores en el Analisis");
		}catch(TokenMgrError e){
			System.out.println("**Ha ocurrido un Error Lexico");
			System.out.println(e.getMessage());
		}catch(Exception err){
			System.out.println(err.getMessage());
			System.out.println("***Posible Error Semantico");
			err.printStackTrace();
		}
	}
}
PARSER_END(php)

SKIP:{
	" "|"\n"|"\r"|"\r\n"|"\t"
}

MORE: 
{
	 <"/*"~["/"]>{System.out.println("COMENTARIO_MULTI" );}: IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT>
TOKEN:
{
	<FORMAL_COMMENT: "*/">{System.out.println("COMENTARIO_MULTI" );} : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
TOKEN:
{
	<MULTI_LINE_COMMENT: "*/"> {System.out.println("COMENTARIO_MULTI" );} : DEFAULT 
}

TOKEN: 
{
	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" |"\r\n")?>{System.out.println("COMENTARIOSim" );}
}

TOKEN:{
	  <NUM : (["0"-"9"])+> {System.out.println("NUMERO -> "+ image + "\r\n");}
    | <ID : <LETTER>(<LETTER>|<NUM>)*> {System.out.println("ID -> " + image + "\r\n");}
    | <#LETTER: (["a"-"z","A"-"Z"])>
    | <CADENA : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*> {System.out.println("CADENA -> " + image + "\r\n");}
    | <DEC : (["0"-"9"])+"."(["0"-"9"])+> {System.out.println("DECIMAL -> "+ image + "\r\n");}
    | <CARAC : ["a"-"z"]> {System.out.println("CARACTER -> "+ image + "\r\n");}
}

TOKEN:
{
	 <TAGINICIO: "<?php" > {System.out.println("InicioPro -> "+ image + "\r\n");}
	|<TAGFIN: "?>"> {System.out.println("FinPro -> "+ image + "\r\n");}
	|<PCLASS: "class "> {System.out.println("P_Class -> "+ image + "\r\n");}
	|<PVAR: "var "> {System.out.println("P_VAR -> "+ image + "\r\n");}
	|<PFUNCION: "function "> {System.out.println("P_FUCT -> "+ image + "\r\n");}
	|<PFOR: "for "> {System.out.println("P_FOR -> "+ image + "\r\n");}
	|<PECHO: "echo "> {System.out.println("P_ECHO -> "+ image + "\r\n");}
	|<PRETURN: "return "> {System.out.println("P_RETU -> "+ image + "\r\n");}
	|<PNEW: "new "> {System.out.println("P_NEW -> "+ image + "\r\n");}
	|<PCONST: "construct "> {System.out.println("P_Constru -> "+ image + "\r\n");}
	|<PINCL: "include "> {System.out.println("P_INCLUD -> "+ image + "\r\n");}
	|<PPARENT: "parent "> {System.out.println("P_PARE -> "+ image + "\r\n");}
	|<PTHIS: "this "> {System.out.println("P_THI -> "+ image + "\r\n");}
	|<PEXT: "extends "> {System.out.println("P_EXT -> "+ image + "\r\n");}
	|<PIF: "if "> {System.out.println("P_IF -> "+ image + "\r\n");}
	|<PELSE: "else "> {System.out.println("P_ELSE -> "+ image + "\r\n");}
	|<PCASE: "case "> {System.out.println("P_CASE -> "+ image + "\r\n");}
	|<PSWIT: "switch "> {System.out.println("P_SWIT -> "+ image + "\r\n");}
	|<PBREAK: "break "> {System.out.println("P_BREK -> "+ image + "\r\n");}
	|<PDEFAULT: "default "> {System.out.println("P_DEFA -> "+ image + "\r\n");}
	|<PWHI: "while "> {System.out.println("P_WHIL -> "+ image + "\r\n");}
	|<PDO: "do "> {System.out.println("P_DO -> "+ image + "\r\n");}
	|<PCONTI: "continue "> {System.out.println("P_CONT -> "+ image + "\r\n");}
	|<PNULL: "NULL "> {System.out.println("P_NULL -> "+ image + "\r\n");}
	|<PTRUE: "true "> {System.out.println("P_TRUE -> "+ image + "\r\n");}
	|<PFALSE: "false "> {System.out.println("P_FALSE -> "+ image + "\r\n");}
}

TOKEN:
{
	 <LLAVEA: "{"> {System.out.println("Llave_Abier -> "+ image + "\r\n");}
	|<LLAVEC: "}"> {System.out.println("Llave_Cerra -> "+ image + "\r\n");}
	|<IGUAL: "="> {System.out.println("Igual -> "+ image + "\r\n");}
	|<PUNTOCOMA: ";"> {System.out.println("Punto_Coma -> "+ image + "\r\n");}
	|<COMA: ","> {System.out.println("SigComa -> "+ image + "\r\n");}
	|<DOLAR: "$"> {System.out.println("SigDolar -> "+ image + "\r\n");}
	|<COMILLASIMPLE: "'"> {System.out.println("ComillaS -> "+ image + "\r\n");}
	|<COMILLADOBLE: "\""> {System.out.println("ComillaD -> "+ image + "\r\n");}
	|<PARA: "("> {System.out.println("Parente_Abier -> "+ image + "\r\n");}
	|<PARC: ")"> {System.out.println("Parente_Cerra -> "+ image + "\r\n");}
	|<MAYOR: ">"> {System.out.println("Mayor -> "+ image + "\r\n");}
	|<MENOR: "<"> {System.out.println("Menor -> "+ image + "\r\n");}
	|<DECR: "--"> {System.out.println("Decremento -> "+ image + "\r\n");}
	|<INC: "++"> {System.out.println("Incremento -> "+ image + "\r\n");}
	|<CORCHA: "["> {System.out.println("CorcheteA -> "+ image + "\r\n");}
	|<CORCHC: "]"> {System.out.println("CorcheteC -> "+ image + "\r\n");}
	|<POR: "*"> {System.out.println("SigPor -> "+ image + "\r\n");}
	|<SUMA: "+"> {System.out.println("SigMas -> "+ image + "\r\n");}
	|<RESTA: "-"> {System.out.println("SigMenos -> "+ image + "\r\n");}
	|<DIV: "/"> {System.out.println("SigDiv -> "+ image + "\r\n");}
	|<MOD: "%"> {System.out.println("SigMod -> "+ image + "\r\n");}
	|<POTEN: "**"> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<IGUAL2: "=="> {System.out.println("Igualdad -> "+ image + "\r\n");}
	|<IDENT: "==="> {System.out.println("SigIden -> "+ image + "\r\n");}
	|<DIFE1: "!="> {System.out.println("Dif!= -> "+ image + "\r\n");}
	|<DIFE2: "<>"> {System.out.println("Dif<> -> "+ image + "\r\n");}
	|<NOIDE: "!=="> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<MENORI: "<="> {System.out.println("MenorQue -> "+ image + "\r\n");}
	|<MAYORI: ">="> {System.out.println("MayorQue -> "+ image + "\r\n");}
	|<LAND: "and "> {System.out.println("AND -> "+ image + "\r\n");}
	|<LOR: "or "> {System.out.println("OR -> "+ image + "\r\n");}
	|<LXOR: "xor "> {System.out.println("XOR -> "+ image + "\r\n");}
	|<LNOT: "!"> {System.out.println("NOT -> "+ image + "\r\n");}
	|<LAND2: "&&"> {System.out.println("AND&& -> "+ image + "\r\n");}
	|<LOR2: "||"> {System.out.println("OR|| -> "+ image + "\r\n");}
	|<AMP: "&"> {System.out.println("Amperston -> "+ image + "\r\n");}
	|<ASIG: "->"> {System.out.println("Asignacion -> "+ image + "\r\n");}
	|<PUNTO: "."> {System.out.println("Punto -> "+ image + "\r\n");}
	|<BARRA: "\\"> {System.out.println("Barra -> "+ image + "\r\n");}
	|<SALTO: "n "> {System.out.println("SaltoL -> "+ image + "\r\n");}
	|<DOBLEP: "::"> {System.out.println("DoblePunto -> "+ image + "\r\n");}
	|<GUIONB: "_"> {System.out.println("GuionBajo -> "+ image + "\r\n");}
	|<DOSP: ":"> {System.out.println("Dos_Puntos -> "+ image + "\r\n");}
}

///INICIO DE GRAMATICA
SimpleNode ProgramaInicio():{/*@bgen(jjtree) ProgramaInicio */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMAINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //Aqui se declaran variables y objetos de javacc
{/*@bgen(jjtree) ProgramaInicio */
        try {
/*@egen*/
	<TAGINICIO>(CuerpoPrograma())+<TAGFIN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CuerpoPrograma():{/*@bgen(jjtree) CuerpoPrograma */
                       SimpleNode jjtn000 = new SimpleNode(JJTCUERPOPROGRAMA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token T1;}
{/*@bgen(jjtree) CuerpoPrograma */
         try {
/*@egen*/
	 CuerpoComentario()
	|(MInclude())*(Clase()|MetodoMain())/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void CuerpoComentario():{/*@bgen(jjtree) CuerpoComentario */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCOMENTARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoComentario */
        try {
/*@egen*/
	<SINGLE_LINE_COMMENT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Clase():{/*@bgen(jjtree) Clase */
              SimpleNode jjtn000 = new SimpleNode(JJTCLASE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token T2;}
{/*@bgen(jjtree) Clase */
        try {
/*@egen*/
	<PCLASS> <ID>(<PEXT><ID>)?<LLAVEA>(Constructor())? (CuerpoClase())* <LLAVEC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CuerpoClase():{/*@bgen(jjtree) CuerpoClase */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCLASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoClase */
         try {
/*@egen*/
	 CVariables()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


void CVariables():{/*@bgen(jjtree) CVariables */
                   SimpleNode jjtn000 = new SimpleNode(JJTCVARIABLES);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token Ids, InDe=null;}
{/*@bgen(jjtree) CVariables */
        try {
/*@egen*/
	<PVAR><DOLAR> Ids = <ID> {/*propiedad.setNombre(Ids.image);*/ if(Ids.image.equals("a")){VerVar=Ids.image;} if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;} 
	 														   if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;} 
	 														   if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;} 
	 														   if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;} 
	 														   if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;} 
	 														   if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;} 
	 														   if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;} 
	 														   if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;} 
	 														   if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;} 
	 						  }
	 					(TVariable())?
	 					(<COMA><DOLAR> Ids =<ID>(TVariable())?)*  /*VARIABLES GLOBALES  */ 
	|<DOLAR> Ids = <ID> {if(Ids.image.equals("a")){VerVar=Ids.image; System.out.println("\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1\u00a1"+VerVar); } if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;} 
	 									if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;} 
	 									if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;} 
	 									if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;} 
	 									if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;} 
	 									if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;} 
	 									if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;} 
	 									if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;} 
	 									if(Ids.image.equals("z")){VerVar25=Ids.image;} else {VerVarOtr=Ids.image;} }
	 					(TVariable() 
						|OAr()<PUNTOCOMA>
						|ORe()<PUNTOCOMA>
						|OLog()<PUNTOCOMA>
						|(InDe = <INC>  
							|InDe = <DECR>{Simb = InDe.image;  if(Simb.equals("++")){
																				System.out.println("%%%%%%%%%%"+Simb);
																				if(VerVar != ""){
																					if(ValorAsig1 != ""){
																						int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF1 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF1);
																						System.out.println("*********DEC-INC1++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar2 != ""){
																				  	if(ValorAsig2 != ""){
																						int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF2 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar3 != ""){
																					if(ValorAsig3 != ""){
																						int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF3 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar4 != ""){
																					if(ValorAsig4 != ""){
																						int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF4 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar5 != ""){
																					if(ValorAsig5 != ""){
																						int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF5 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar6 != ""){
																					if(ValorAsig6 != ""){
																						int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF6 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar7 != ""){
																					if(ValorAsig7 != ""){
																						int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF7 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVar8 != ""){
																					if(ValorAsig8 != ""){
																						int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********"); 
																						int RES = variableL + 1;
																						System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}if(ValorAsigF8 != ""){
																						float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********"); 
																						float RES = variableL2 + 1;
																						System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																					}
																				}if(VerVarOtr != ""){
																					System.out.println("----------> " +VerVarOtr);
																				}
																}if(Simb.equals("--")){
																				   	System.out.println("%%%%%%%%%%"+Simb);
																				   	if(VerVar != ""){
																						if(ValorAsig1 != ""){
																							int variableL = Integer.parseInt(ValorAsig1); System.out.println("*********DEC-INC1++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF1 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF1);
																							System.out.println("*********DEC-INC1--********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar2 != ""){
																					  	if(ValorAsig2 != ""){
																							int variableL = Integer.parseInt(ValorAsig2); System.out.println("*********DEC-INC2++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF2 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF2); System.out.println("*********DEC-INC2++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar3 != ""){
																						if(ValorAsig3 != ""){
																							int variableL = Integer.parseInt(ValorAsig3); System.out.println("*********DEC-INC3++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF3 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF3); System.out.println("*********DEC-INC3++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar4 != ""){
																						if(ValorAsig4 != ""){
																							int variableL = Integer.parseInt(ValorAsig4); System.out.println("*********DEC-INC4++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF4 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF4); System.out.println("*********DEC-INC4++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar5 != ""){
																						if(ValorAsig5 != ""){
																							int variableL = Integer.parseInt(ValorAsig5); System.out.println("*********DEC-INC5++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF5 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF5); System.out.println("*********DEC-INC5++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar5 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar6 != ""){
																						if(ValorAsig6 != ""){
																							int variableL = Integer.parseInt(ValorAsig6); System.out.println("*********DEC-INC6++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF6 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF6); System.out.println("*********DEC-INC6++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar6 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar7 != ""){
																						if(ValorAsig7 != ""){
																							int variableL = Integer.parseInt(ValorAsig7); System.out.println("*********DEC-INC7++********"); 
																							int RES = variableL - 1;
																							System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF7 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF7);  System.out.println("*********DEC-INC7++********"); 
																							float RES = variableL2 - 1;
																							System.out.println(VerVar7 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}if(VerVar8 != ""){
																						if(ValorAsig8 != ""){
																							int variableL = Integer.parseInt(ValorAsig8); System.out.println("*********DEC-INC7++********"); 
																							int RES = variableL + 1;
																							System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}if(ValorAsigF8 != ""){
																							float variableL2 = Float.parseFloat(ValorAsigF8);  System.out.println("*********DEC-INC7++********"); 
																							float RES = variableL2 + 1;
																							System.out.println(VerVar8 +" = "+ Simb + "-->" + RES); System.out.println("*******************");
																						}
																					}
																}
												})<PUNTOCOMA>)? 
						(<COMA><DOLAR><ID>(TVariable())?)*  /*VARIABLES LOCALES */
	|DecFunction()
	|OperacionesArit1()
	|Imprimir()
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()
	|SentenciaDoWh()
	|SentenciaFor()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void TVariable():{/*@bgen(jjtree) TVariable */
  SimpleNode jjtn000 = new SimpleNode(JJTTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TVariable */
        try {
/*@egen*/
	(AsignacionVar()|<PUNTOCOMA>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void AsignacionVar():{/*@bgen(jjtree) AsignacionVar */
                      SimpleNode jjtn000 = new SimpleNode(JJTASIGNACIONVAR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdAsgi, ValAsig, ValDecAsig;}
{/*@bgen(jjtree) AsignacionVar */
         try {
/*@egen*/
	 <IGUAL>(<COMILLASIMPLE>IdAsgi=<ID><COMILLASIMPLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS SIM********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |<PNEW> <ID><PARA><PARC>
	 	     |<COMILLADOBLE>IdAsgi=<ID><COMILLADOBLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR IDS DOB********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |ValAsig=<NUM>(OAr())? {if(ValorAsig16.equals("") && ValorAsig15 != ""){
	 	     							ValorAsig16=ValAsig.image;
	 	     						 }if(ValorAsig15.equals("") && ValorAsig14 != ""){
	 	     							ValorAsig15=ValAsig.image;
	 	     						 }if(ValorAsig14.equals("") && ValorAsig13 != ""){
	 	     							ValorAsig14=ValAsig.image;
	 	     						 }if(ValorAsig13.equals("") && ValorAsig12 != ""){
	 	     							ValorAsig13=ValAsig.image; System.out.println("*********VAR NUM13********");
	 	     						 }if(ValorAsig12.equals("") && ValorAsig11 != ""){
	 	     							ValorAsig12=ValAsig.image; System.out.println("*********VAR NUM12********");
	 	     						 }if(ValorAsig11.equals("") && ValorAsig10 != ""){
	 	     							ValorAsig11=ValAsig.image; System.out.println("*********VAR NUM11********");
	 	     						 }if(ValorAsig10.equals("") && ValorAsig9 != ""){
	 	     							ValorAsig10=ValAsig.image; System.out.println("*********VAR NUM10********");
	 	     						 }if(ValorAsig9.equals("") && ValorAsig8 != ""){ 
	 	     							ValorAsig9=ValAsig.image; System.out.println("*********VAR NUM9********");
	 	     						 }if(ValorAsig8.equals("") && ValorAsig7 != ""){
	 	     							ValorAsig8=ValAsig.image;System.out.println("*********VAR NUM8********");
	 	     						 }if(ValorAsig7.equals("") && ValorAsig6 != ""){
	 	     							ValorAsig7=ValAsig.image; System.out.println("*********VAR NUM7********");
	 	     						 }if(ValorAsig6.equals("") && ValorAsig5 != ""){
	 	     							ValorAsig6=ValAsig.image; System.out.println("*********VAR NUM6********");
	 	     						 }if(ValorAsig5.equals("") && ValorAsig4 != ""){
	 	     							ValorAsig5=ValAsig.image; System.out.println("*********VAR NUM5********");
	 	     						 }if(ValorAsig4.equals("") && ValorAsig3 != ""){
	 	     							ValorAsig4=ValAsig.image; System.out.println("*********VAR NUM4********");
	 	     						 }if(ValorAsig3.equals("") && ValorAsig2 != ""){
	 	     							ValorAsig3=ValAsig.image; System.out.println("*********VAR NUM3********");
	 	     						 }if(ValorAsig2.equals("") && ValorAsig1 != ""){
	 	     							ValorAsig2=ValAsig.image; System.out.println("*********VAR NUM2********");
	 	     						 }if(ValorAsig1.equals("")){
	 	     							ValorAsig1=ValAsig.image; System.out.println("*********VAR NUM1********");
	 	     						 }
	 	     					    //System.out.println("*********VAR NUM********"); System.out.println(VerVar +" = "+ ValorAsig1);System.out.println("*******************");
	 	     					}
	 	     |ValDecAsig=<DEC>(OAr())? {if(ValorAsigF10.equals("") && ValorAsigF9 != "" /*&& ValorAsig10 != ""*/){
	 	     							ValorAsigF10=ValDecAsig.image; System.out.println("*********VAR FLOAT9********");
	 	     						 }if(ValorAsigF9.equals("") && ValorAsigF8 != "" /*&& ValorAsig9 != ""*/){
	 	     							ValorAsigF9=ValDecAsig.image; System.out.println("*********VAR FLOAT8********");
	 	     						 }if(ValorAsigF8.equals("") && ValorAsigF7 != "" /*&& ValorAsig8 != ""*/){
	 	     							ValorAsigF8=ValDecAsig.image; System.out.println("*********VAR FLOAT7********");
	 	     						 }if(ValorAsigF7.equals("") && ValorAsigF6 != "" /*&& ValorAsig7 != ""*/){
	 	     							ValorAsigF7=ValDecAsig.image; System.out.println("*********VAR FLOAT6********");
	 	     						 }if(ValorAsigF6.equals("") && ValorAsigF5 != "" /*&& ValorAsig6 != ""*/){
	 	     							ValorAsigF6=ValDecAsig.image;  System.out.println("*********VAR FLOAT5********");
	 	     						 }if(ValorAsigF5.equals("") && ValorAsigF4 != "" /*&& ValorAsig5 != ""*/){
	 	     							ValorAsigF5=ValDecAsig.image; System.out.println("*********VAR FLOAT4********");
	 	     						 }if(ValorAsigF4.equals("") && ValorAsigF3 != "" /*&& ValorAsig4 != ""*/){
	 	     							ValorAsigF4=ValDecAsig.image; System.out.println("*********VAR FLOAT3********");
	 	     						 }if(ValorAsigF3.equals("") && ValorAsigF2 != "" /*&& ValorAsig3 != ""*/){
	 	     							ValorAsigF3=ValDecAsig.image; System.out.println("*********VAR FLOAT2********");
	 	     						 }if(ValorAsigF2.equals("") && ValorAsigF1 != "" /*&& ValorAsig2 != ""*/){
	 	     							ValorAsigF2=ValDecAsig.image; System.out.println("*********VAR FLOAT1********");
	 	     						 }if(ValorAsigF1.equals("") /*&& ValorAsig1 != ""*/){
	 	     							ValorAsigF1=ValDecAsig.image; /*System.out.println("&&&&&&& "+ValorAsigF1+"-"+ValDecAsig.image);*/System.out.println("*********VAR FLOAT1********");
	 	     						 }
	 	     					    //System.out.println("*********VAR FLOAT1********"); System.out.println(VerVar2 +" = "+ ValDecAsig.image); System.out.println(VerVar2 +" = "+ ValorAsigF2); System.out.println("*******************");
	 	     					}
	 	     |<DOLAR>IdAsgi=<ID>(OAr()
	 	     				|<PUNTO>(<COMILLADOBLE><ID><COMILLADOBLE>|<NUM>|<DEC>))?)<PUNTOCOMA>
	|<ASIG><ID><PARA><DOLAR><ID>(<COMA><DOLAR><ID>)*<PARC><PUNTOCOMA>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void DecFunction():{/*@bgen(jjtree) DecFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTDECFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DecFunction */
        try {
/*@egen*/ //DEFINICION DE METODOS Y FUNCIONES
	<PFUNCION><ID><PARA>(ParametrosFuction())?<PARC><LLAVEA>CuerpoFunction()<LLAVEC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CuerpoFunction():{/*@bgen(jjtree) CuerpoFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoFunction */
         try {
/*@egen*/
	 ((CVariables())+(CuerpoReturn())?|CuerpoMatriz())/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
///****DECLARACION DE MATRIZ******
void CuerpoMatriz():{/*@bgen(jjtree) CuerpoMatriz */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOMATRIZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoMatriz */
         try {
/*@egen*/
	 <PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(<PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>CuerpoFor()<LLAVEC>|CuerpoVecFor()/*DEC. VEC.*/)<LLAVEC>AsignarMatVect()Imprimir()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
void ParametrosFOR():{/*@bgen(jjtree) ParametrosFOR */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParametrosFOR */
        try {
/*@egen*/
	<DOLAR><ID><IGUAL><NUM><PUNTOCOMA> <DOLAR><ID>(<MAYOR>|<MENOR>)<NUM><PUNTOCOMA> <DOLAR><ID>(<INC>|<DECR>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CuerpoFor():{/*@bgen(jjtree) CuerpoFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoFor */
        try {
/*@egen*/
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><POR><DOLAR><ID><PUNTOCOMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void CuerpoVecFor():{/*@bgen(jjtree) CuerpoVecFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOVECFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoVecFor */
        try {
/*@egen*/
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><PUNTOCOMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void AsignarMatVect():{/*@bgen(jjtree) AsignarMatVect */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNARMATVECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AsignarMatVect */
        try {
/*@egen*/
	<DOLAR><ID><CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?<IGUAL><NUM><PUNTOCOMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Imprimir():{/*@bgen(jjtree) Imprimir */
                 SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token CIds, VIds1=null, VIds2;} /*IMPRESION MATRIZ*/
{/*@bgen(jjtree) Imprimir */
        try {
/*@egen*/
	<PECHO><DOLAR>VIds2=<ID>
						(<CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?
						|(<PUNTO>(<COMILLADOBLE><BARRA><SALTO><COMILLADOBLE>
							      |<DOLAR>VIds1=<ID>{ValorIdEcho=VIds1.image;}))*
						|<COMILLADOBLE>(CIds=<ID>{cadenaCa2= cadenaCa2 + CIds.image +" ";})+<COMILLADOBLE>)<PUNTOCOMA>/*@bgen(jjtree)*/
                                                                                                                                              {
                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                jjtc000 = false;
                                                                                                                                              }
/*@egen*/{System.out.println("*******ECHO CIds*******"); 
																														System.out.println(cadenaCa2); System.out.println("****************");
																														System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
																														if(ValorIdEcho.equals("a")){
																															System.out.println("!!!!!!!!!!!!"+ValorIdEcho);
																														}
																													  }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
///*******OPERACIONES ARITMETICAS
void OperacionesArit1():{/*@bgen(jjtree) OperacionesArit1 */
                         SimpleNode jjtn000 = new SimpleNode(JJTOPERACIONESARIT1);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdOp1,OperatorMinus;}
{/*@bgen(jjtree) OperacionesArit1 */
         try {
/*@egen*/
	 OperatorMinus=<RESTA><DOLAR>IdOp1=<ID><PUNTOCOMA>/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {OpeMenosAr= OperatorMinus.image; IdMenosAr=IdOp1.image;}/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}
void OAr():{/*@bgen(jjtree) OAr */
            SimpleNode jjtn000 = new SimpleNode(JJTOAR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperA; Token OperandA;} /// OPERACIONES ARITMETICAS CON OPERANDOS
{/*@bgen(jjtree) OAr */
        try {
/*@egen*/
	((OperA=<POR>{OperadorAr=OperA.image;}
	|OperA=<SUMA>{OperadorAr=OperA.image;}
	|OperA=<DIV>{OperadorAr=OperA.image;}
	|OperA=<POTEN>{OperadorAr=OperA.image;}
	|OperA=<MOD>{OperadorAr=OperA.image;}
	|OperA=<RESTA>{OperadorAr=OperA.image;})
		(<DOLAR> OperandA=<ID>{OperandoAr=OperandA.image;}
			|OperandA=<NUM>{OperandoAr=OperandA.image;}
			|OperandA=<DEC>{OperandoAr=OperandA.image;}))+/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ORe():{/*@bgen(jjtree) ORe */
            SimpleNode jjtn000 = new SimpleNode(JJTORE);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperR, OperandR;}/// OPERACIONES RELACIONALES CON OPERANDOS
{/*@bgen(jjtree) ORe */
        try {
/*@egen*/
	(OperR=<IGUAL2>{OperadorRe=OperR.image;}
	|OperR=<IDENT>{OperadorRe=OperR.image;}
	|OperR=<DIFE1>{OperadorRe=OperR.image;}
	|OperR=<DIFE2>{OperadorRe=OperR.image;}
	|OperR=<NOIDE>{OperadorRe=OperR.image;}
	|OperR=<MENOR>{OperadorRe=OperR.image;}
	|OperR=<MAYOR>{OperadorRe=OperR.image;}
	|OperR=<MENORI>{OperadorRe=OperR.image;}
	|OperR=<MAYORI>{OperadorRe=OperR.image;})
		(<DOLAR>OperandR=<ID>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/{OperandoRe =OperandR.image;}
			   |OperandR=<NUM>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/{OperandoRe =OperandR.image;}
			   |OperandR=<DEC>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/{OperandoRe =OperandR.image;})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OLog():{/*@bgen(jjtree) OLog */
             SimpleNode jjtn000 = new SimpleNode(JJTOLOG);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperL, OperandL;}///OPERACIONES LOGICAS CON OPERANDOS
{/*@bgen(jjtree) OLog */
        try {
/*@egen*/
	((OperL=<LAND>{OperadorLo=OperL.image;}
	 |OperL=<LOR>{OperadorLo=OperL.image;}
	 |OperL=<LXOR>{OperadorLo=OperL.image;}
	 |OperL=<LNOT>{OperadorLo=OperL.image;}
	 |OperL=<LAND2>{OperadorLo=OperL.image;}
	 |OperL=<LOR2>{OperadorLo=OperL.image;}
	    )<DOLAR>OperandL=<ID>{OperandoLo=OperandL.image;})+/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParametrosFuction():{/*@bgen(jjtree) ParametrosFuction */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSFUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}//PARAMETROS DE LAS FUNCIONES
{/*@bgen(jjtree) ParametrosFuction */
        try {
/*@egen*/
	(<AMP>)?<DOLAR><ID>(<COMA>(<AMP>)?<DOLAR><ID>)*/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CuerpoReturn():{/*@bgen(jjtree) CuerpoReturn */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPORETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoReturn */
         try {
/*@egen*/
	 <PRETURN><DOLAR><ID><PUNTOCOMA>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Constructor():{/*@bgen(jjtree) Constructor */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}  /*DECLARACION DEL CONSTRUCTOR*/
{/*@bgen(jjtree) Constructor */
        try {
/*@egen*/
	(<PVAR><DOLAR><ID>TVariable())* <PFUNCION><GUIONB><GUIONB><PCONST><PARA>(ParametrosFuction())?<PARC><LLAVEA>
													(CuerpoConstructor())+
													<LLAVEC>/*@bgen(jjtree)*/
                                                                                                                 {
                                                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                                                   jjtc000 = false;
                                                                                                                 }
/*@egen*/ {System.out.println("*******ECHO CONST*******"); System.out.println(cadenaCa); System.out.println("****************");}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void CuerpoConstructor():{/*@bgen(jjtree) CuerpoConstructor */
                          SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCONSTRUCTOR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdsCons;}
{/*@bgen(jjtree) CuerpoConstructor */
         try {
/*@egen*/
	 MetParent()
	|<PECHO><COMILLADOBLE>(IdsCons=<ID>{cadenaCa= cadenaCa + IdsCons.image +" ";})+<COMILLADOBLE><PUNTOCOMA>
	|<DOLAR>(<ID><IGUAL><PNEW><ID><PARA><PARC>|<PTHIS><ASIG><ID><IGUAL>(<NUM>|<DEC>|<PNULL>|<DOLAR><ID>))<PUNTOCOMA>
	|MetThis()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void MInclude():{/*@bgen(jjtree) MInclude */
  SimpleNode jjtn000 = new SimpleNode(JJTMINCLUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MInclude */
        try {
/*@egen*/
	<PINCL>(<PARA><COMILLADOBLE><ID><PUNTO><ID><COMILLADOBLE><PARC>|<COMILLADOBLE><ID><PUNTO><ID><COMILLADOBLE>)<PUNTOCOMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MetParent():{/*@bgen(jjtree) MetParent */
  SimpleNode jjtn000 = new SimpleNode(JJTMETPARENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MetParent */
        try {
/*@egen*/
	<PPARENT><DOBLEP>(<GUIONB><GUIONB><PCONST><PARA>ParametrosFuction()<PARC>|<ID><PARA><PARC>)<PUNTOCOMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void MetThis():{/*@bgen(jjtree) MetThis */
  SimpleNode jjtn000 = new SimpleNode(JJTMETTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MetThis */
        try {
/*@egen*/
	<PTHIS><ASIG><ID><IGUAL>(<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PUNTOCOMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
//*****************SENTENCIAS IF*******************************
void CuerpoIF():{/*@bgen(jjtree) CuerpoIF */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoIF */
        try {
/*@egen*/
	<PIF><PARA>ParametrosIF()<PARC><LLAVEA>(SentenciasIF())+<LLAVEC>(<PELSE>(Elseifs())?<LLAVEA>(SentenciasIF())+<LLAVEC>)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*//*(<PELSE><LLAVEA><LLAVEC>)?*/
}
void Elseifs():{/*@bgen(jjtree) Elseifs */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEIFS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Elseifs */
        try {
/*@egen*/
	(<PIF><PARA>ParametrosIF()<PARC><LLAVEA>(SentenciasIF())+<LLAVEC><PELSE>)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParametrosIF():{/*@bgen(jjtree) ParametrosIF */
                     SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSIF);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdParam1, IdParam2, NumParam1, DecParam1,IdParam3, IdParam4;}
{/*@bgen(jjtree) ParametrosIF */
        try {
/*@egen*/
	(<DOLAR>IdParam1=<ID>ORe2() {ValorP1= IdParam1.image;}
		      (<DOLAR>IdParam2=<ID> {ValorP2= IdParam2.image;}
		      	|NumParam1=<NUM> {ValorP3= NumParam1.image;}
		      	|DecParam1=<DEC> {ValorP4= DecParam1.image; }
		      	|<COMILLASIMPLE>IdParam3=<ID><COMILLASIMPLE> {ValorP5= IdParam3.image;}
		      	|<COMILLADOBLE>IdParam4=<ID><COMILLADOBLE>{ValorP6= IdParam4.image;}){if(ValorP1 != ""){
		      																			if(ValorP2 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}if(ValorP3 != ""){ //PARA NUMEROS ENTEROS
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig2.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig3.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig4.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig5.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig6.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig7.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig8.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig9.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig10.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig11.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig12.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}if(ValorAsig13.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("!=")){
		      																					if(Integer.parseInt(ValorAsig1) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig2) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig3) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig4) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig5) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig6) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig7) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig8) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig9) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig10) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig11) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}if(Integer.parseInt(ValorAsig12) != Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" NO ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("<")){
		      																					if(Integer.parseInt(ValorAsig1) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig2) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig3) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig4) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig5) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig6) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig7) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig8) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig9) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig10) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}if(Integer.parseInt(ValorAsig11) < Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR");
		      																					}
		      																				}if(OperadorRe2.equals(">")){
		      																					if(Integer.parseInt(ValorAsig1) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig2) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig3) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig4) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig5) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig6) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig7) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig8) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig9) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig10) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}if(Integer.parseInt(ValorAsig11) > Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR");
		      																					}
		      																				}if(OperadorRe2.equals("<=")){
		      																					if(Integer.parseInt(ValorAsig1) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig2) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig3) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig4) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig5) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig6) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig7) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig8) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig9) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig10) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig11) <= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MENOR IGUAL QUE");
		      																					}
		      																				}if(OperadorRe2.equals(">=")){
		      																					if(Integer.parseInt(ValorAsig1) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig2) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig3) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig4) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig5) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig6) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig7) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig8) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig9) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig10) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}if(Integer.parseInt(ValorAsig11) >= Integer.parseInt(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3 +" ES MAYOR IGUAL QUE");
		      																					}
		      																				}
		      																			}/*if(ValorP4 != ""){   //PARA NUMEROS DECIMALES
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsigF1.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF2.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF3.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF4.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF5.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF6.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF7.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF8.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF9.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF10.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF11.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}if(ValorAsigF12.equals(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES IGUAL");
		      																					}
		      																				}if(OperadorRe2.equals("!=")){
		      																					if(Float.parseFloat(ValorAsigF1) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF2) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF3) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF4) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF5) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF6) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF7) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF8) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF9) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}if(Float.parseFloat(ValorAsigF10) != Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES DIFERENTE");
		      																					}
		      																				}if(OperadorRe2.equals("<")){
		      																					if(Float.parseFloat(ValorAsigF1) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF2) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF3) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF4) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF5) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF6) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF7) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF8) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF9) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF10) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}if(Float.parseFloat(ValorAsigF11) < Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR");
		      																					}
		      																				}if(OperadorRe2.equals(">")){
		      																					if(Float.parseFloat(ValorAsigF1) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF2) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF3) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF4) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF5) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF6) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF7) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF8) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF9) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}if(Float.parseFloat(ValorAsigF10) > Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR");
		      																					}
		      																				}if(OperadorRe2.equals("<=")){
		      																					if(Float.parseFloat(ValorAsigF1) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF2) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF3) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF4) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF5) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF6) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF7) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF8) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF9) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF10) <= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MENOR QUE");
		      																					}
		      																				}if(OperadorRe2.equals(">=")){
		      																					if(Float.parseFloat(ValorAsigF1) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF2) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF3) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF4) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF5) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF6) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF7) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF8) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF9) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}if(Float.parseFloat(ValorAsigF10) >= Float.parseFloat(ValorP4)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP4 +" ES MAYOR QUE");
		      																					}
		      																				}
		      																			}*/if(ValorP5 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}if(ValorP6 != ""){
		      																				if(OperadorRe2.equals("==")){
		      																					if(ValorAsig1.equals(ValorP3)){
		      																						System.out.println("---------> "+ValorP1 + OperadorRe2 + ValorP3);
		      																					}
		      																				}
		      																			}
		      																		 }} 
		      															(OLog2()<DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>))*|<PTRUE>|<PFALSE>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void NotParametros():{/*@bgen(jjtree) NotParametros */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //!($b==0)
{/*@bgen(jjtree) NotParametros */
        try {
/*@egen*/
	<LNOT><PARA><DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PARC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ORe2():{/*@bgen(jjtree) ORe2 */
             SimpleNode jjtn000 = new SimpleNode(JJTORE2);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperadorR2;} /// OPERACIONES RELACIONALES SIN OPERANDOS
{/*@bgen(jjtree) ORe2 */
        try {
/*@egen*/
	(OperadorR2=<IGUAL2>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<IDENT>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<DIFE1>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<DIFE2>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<NOIDE>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MENOR>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MAYOR>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MENORI>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {OperadorRe2=OperadorR2.image;}
	|OperadorR2=<MAYORI>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {OperadorRe2=OperadorR2.image;})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void OLog2():{/*@bgen(jjtree) OLog2 */
              SimpleNode jjtn000 = new SimpleNode(JJTOLOG2);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperadorL2;} /// OPEACIONES LOGICAS SIN OPERENADOS
{/*@bgen(jjtree) OLog2 */
        try {
/*@egen*/
	(OperadorL2=<LAND>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LOR>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LXOR>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LNOT>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LAND2>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorLo2 =OperadorL2.image;}
	|OperadorL2=<LOR2>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {OperadorLo2 =OperadorL2.image;})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void OAr2():{/*@bgen(jjtree) OAr2 */
             SimpleNode jjtn000 = new SimpleNode(JJTOAR2);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token OperadorA2;} /// OPERACIONES ARITMETICAS SIN OPERANDOS
{/*@bgen(jjtree) OAr2 */
        try {
/*@egen*/
	(OperadorA2=<POR>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<SUMA>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<DIV>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<POTEN>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<MOD>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {OperadorAr2 = OperadorA2.image;}
	|OperadorA2=<RESTA>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {OperadorAr2 = OperadorA2.image;})/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void SentenciasIF():{/*@bgen(jjtree) SentenciasIF */
                     SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIASIF);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdIf1, IdIf2, IdIf3, IdIf4, IdIf5=null, NumIf1, DecIf1, NumIf2, DecIf2, InDecIf, NumIf3, DecIf3, NumIf4 =null;}
{/*@bgen(jjtree) SentenciasIF */
        try {
/*@egen*/
	(<DOLAR><ID>(<IGUAL>(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>|(OAr2()(<DOLAR><ID>|<NUM>|<DEC>))*)|(<INC>|<DECR>))|(<PBREAK>|<PCONTI>))<PUNTOCOMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//**************SENTENCIA SWITCH******************
void SentenciaSW():{/*@bgen(jjtree) SentenciaSW */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIASW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenciaSW */
        try {
/*@egen*/
	<PSWIT><PARA><DOLAR><ID><PARC><LLAVEA>(SentCase())+<LLAVEC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void SentCase():{/*@bgen(jjtree) SentCase */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentCase */
        try {
/*@egen*/
	<PCASE><NUM><DOSP>CuerpoCase()(<PDEFAULT><DOSP>CuerpoCase())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void CuerpoCase():{/*@bgen(jjtree) CuerpoCase */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoCase */
         try {
/*@egen*/
	 Imprimir2() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|SentenciasIF() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|CuerpoIF()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
void Imprimir2():{/*@bgen(jjtree) Imprimir2 */
                  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR2);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdsImp2; Token NumImp2;}
{/*@bgen(jjtree) Imprimir2 */
        try {
/*@egen*/
	<PECHO>(<COMILLADOBLE>(IdsImp2=<ID> {VarIdImp2 = VarIdImp2 + IdsImp2.image; }
						|NumImp2=<NUM> {VarNumImp2 = VarNumImp2 + NumImp2.image;})*
			<COMILLADOBLE>)<PUNTOCOMA>/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/{System.out.println("**************"); System.out.println(VarIdImp2+"-No."+VarNumImp2); System.out.println("**************");}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
//*****************SENTENCIA WHILE******************************
void SentenciaWh():{/*@bgen(jjtree) SentenciaWh */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAWH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenciaWh */
        try {
/*@egen*/
	<PWHI><PARA>ParametrosIF()<PARC><LLAVEA>(CuerpoWh())+<LLAVEC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void CuerpoWh():{/*@bgen(jjtree) CuerpoWh */
                 SimpleNode jjtn000 = new SimpleNode(JJTCUERPOWH);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token IdIm1, IdIm2, IdIm3, IdIm4, IdIm5;}
{/*@bgen(jjtree) CuerpoWh */
         try {
/*@egen*/
	 <PECHO>(<DOLAR>(IdIm1=<ID> {if(OpeMenosAr !="" && IdMenosAr !=""){
									ValorIdCWh = IdIm1.image;
									if(ValorIdCWh.equals(IdMenosAr)){
										if(ValorAsig1 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig1);
											System.out.println("*******-$ID1*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig2 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig2);
											System.out.println("*******-$ID2*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig3 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig3);
											System.out.println("*******-$ID3*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig4 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig4);
											System.out.println("*******-$ID4*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig5 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig5);
											System.out.println("*******-$ID5*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig6 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig6);
											System.out.println("*******-$ID6*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig7 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig7);
											System.out.println("*******-$ID7*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsig8 != ""){
											int resultadoOp1 = 0- Integer.parseInt(ValorAsig8);
											System.out.println("*******-$ID8*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}
										//PARA VALORES DECIMALES
										if(ValorAsigF1 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF1);
											System.out.println("*******-$ID1*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF2 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF2);
											System.out.println("*******-$ID2*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF3 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF3);
											System.out.println("*******-$ID3*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF4 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF4);
											System.out.println("*******-$ID4*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF5 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF5);
											System.out.println("*******-$ID5*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF6 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF6);
											System.out.println("*******-$ID6*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF7 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF7);
											System.out.println("*******-$ID7*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}if(ValorAsigF8 != ""){
											float resultadoOp1 = 0- Float.parseFloat(ValorAsigF8);
											System.out.println("*******-$ID8*********");
											System.out.println(resultadoOp1);System.out.println("********************");
										}
									}
								}
								}
	 	            |<PTHIS><ASIG>IdIm2=<ID>)
	        |(<COMILLADOBLE>IdIm3=<ID><COMILLADOBLE>)(<PUNTO>(<COMILLADOBLE>(IdIm4=<ID>
	        																|<BARRA><SALTO>)<COMILLADOBLE>
	        												  |<DOLAR><PTHIS><ASIG>IdIm5=<ID>))*)<PUNTOCOMA>
	//OPERACIONES ARITMETICAS
	|<DOLAR><ID>(<IGUAL><DOLAR><ID>OAr()
				|(<INC>|<DECR>))<PUNTOCOMA>
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|OperacionesArit1()
	|SentenciaSW()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

//***************SENTENCIA DO WHILE*****************************
void SentenciaDoWh():{/*@bgen(jjtree) SentenciaDoWh */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIADOWH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenciaDoWh */
        try {
/*@egen*/
	<PDO><LLAVEA>(CuerpoWh())+<LLAVEC><PWHI><PARA>ParametrosIF()<PARC><PUNTOCOMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void SentenciaFor():{/*@bgen(jjtree) SentenciaFor */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenciaFor */
        try {
/*@egen*/
	<LNOT><PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(CuerpoFor2())+<LLAVEC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void CuerpoFor2():{/*@bgen(jjtree) CuerpoFor2 */
  SimpleNode jjtn000 = new SimpleNode(JJTCUERPOFOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CuerpoFor2 */
        try {
/*@egen*/
	<DOLAR><ID><IGUAL><DOLAR><ID>(OAr2()(<DOLAR><ID>|<NUM>|<DEC>))*<PUNTOCOMA>
	|Imprimir()
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void MetodoMain():{/*@bgen(jjtree) MetodoMain */
  SimpleNode jjtn000 = new SimpleNode(JJTMETODOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MetodoMain */
        try {
/*@egen*/
	<DOLAR><ID>(<IGUAL><PNEW><ID><PARA>(<NUM>|<ID>|ParametrosMain())?<PARC>|<ASIG><ID><PARA>(<NUM>|<ID>|<DOLAR><ID><ASIG><ID>)?<PARC>)<PUNTOCOMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ParametrosMain():{/*@bgen(jjtree) ParametrosMain */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROSMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParametrosMain */
        try {
/*@egen*/
	(<NUM>|<DEC>|<COMILLADOBLE><ID><COMILLADOBLE>)(<COMA>(<NUM>|<DEC>|<COMILLADOBLE><ID><COMILLADOBLE>))*/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}