/* Generated By:JavaCC: Do not edit this line. php.java */
//package Javacc;

import java.util.*;

public class php implements phpConstants {

                public static void main(String[] args) throws ParseException{
                        try{
                                php analizador = new php(System.in);
                                analizador.ProgramaInicio();
                        }catch(ParseException e){
                                System.out.println(e.getMessage());
                                System.out.println("**Error Sintactico: Se ha encontrado errores en el Analisis");
                        }catch(TokenMgrError e){
                                System.out.println("**Ha ocurrido un Error Lexico");
                                System.out.println(e.getMessage());
                        }catch(Exception err){
                                System.out.println("**Posible Error Lexico");
                                System.out.println(err);
                        }
                }

///INICIO DE GRAMATICA
  final public void ProgramaInicio() throws ParseException {
    jj_consume_token(TAGINICIO);
    label_1:
    while (true) {
      CuerpoPrograma();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_LINE_COMMENT:
      case PCLASS:
      case PINCL:
      case DOLAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(TAGFIN);
  }

  final public void CuerpoPrograma() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLE_LINE_COMMENT:
      CuerpoComentario();
      break;
    case PCLASS:
    case PINCL:
    case DOLAR:
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PINCL:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        MInclude();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PCLASS:
        Clase();
        break;
      case DOLAR:
        MetodoMain();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CuerpoComentario() throws ParseException {
    jj_consume_token(SINGLE_LINE_COMMENT);
  }

  final public void Clase() throws ParseException {
    jj_consume_token(PCLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PEXT:
      jj_consume_token(PEXT);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LLAVEA);
    Constructor();
    CuerpoClase();
    jj_consume_token(LLAVEC);
  }

  final public void CuerpoClase() throws ParseException {
    label_3:
    while (true) {
      CVariables();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PVAR:
      case PFUNCION:
      case PECHO:
      case PIF:
      case PSWIT:
      case PWHI:
      case PDO:
      case DOLAR:
      case RESTA:
      case LNOT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
  }

  final public void CVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PVAR:
      jj_consume_token(PVAR);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case PUNTOCOMA:
      case ASIG:
        TVariable();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case PUNTOCOMA:
        case ASIG:
          TVariable();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      }
      break;
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case PUNTOCOMA:
      case MAYOR:
      case MENOR:
      case POR:
      case SUMA:
      case RESTA:
      case DIV:
      case MOD:
      case POTEN:
      case IGUAL2:
      case IDENT:
      case DIFE1:
      case DIFE2:
      case NOIDE:
      case MENORI:
      case MAYORI:
      case LAND:
      case LOR:
      case LXOR:
      case LNOT:
      case LAND2:
      case LOR2:
      case ASIG:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case PUNTOCOMA:
        case ASIG:
          TVariable();
          break;
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
          OAr();
          jj_consume_token(PUNTOCOMA);
          break;
        case MAYOR:
        case MENOR:
        case IGUAL2:
        case IDENT:
        case DIFE1:
        case DIFE2:
        case NOIDE:
        case MENORI:
        case MAYORI:
          ORe();
          jj_consume_token(PUNTOCOMA);
          break;
        case LAND:
        case LOR:
        case LXOR:
        case LNOT:
        case LAND2:
        case LOR2:
          OLog();
          jj_consume_token(PUNTOCOMA);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMA);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case PUNTOCOMA:
        case ASIG:
          TVariable();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      }
      break;
    case PFUNCION:
      DecFunction();
      break;
    case RESTA:
      OperacionesArit1();
      break;
    case PECHO:
      Imprimir();
      break;
    case PIF:
      CuerpoIF();
      break;
    case PSWIT:
      SentenciaSW();
      break;
    case PWHI:
      SentenciaWh();
      break;
    case PDO:
      SentenciaDoWh();
      break;
    case LNOT:
      SentenciaFor();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
    case ASIG:
      AsignacionVar();
      break;
    case PUNTOCOMA:
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AsignacionVar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMILLASIMPLE:
        jj_consume_token(COMILLASIMPLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLASIMPLE);
        break;
      case PNEW:
        jj_consume_token(PNEW);
        jj_consume_token(ID);
        jj_consume_token(PARA);
        jj_consume_token(PARC);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      case NUM:
        jj_consume_token(NUM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
          OAr();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
      case DEC:
        jj_consume_token(DEC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
          OAr();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
        case PUNTO:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POR:
          case SUMA:
          case RESTA:
          case DIV:
          case MOD:
          case POTEN:
            OAr();
            break;
          case PUNTO:
            jj_consume_token(PUNTO);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMILLADOBLE:
              jj_consume_token(COMILLADOBLE);
              jj_consume_token(ID);
              jj_consume_token(COMILLADOBLE);
              break;
            case NUM:
              jj_consume_token(NUM);
              break;
            case DEC:
              jj_consume_token(DEC);
              break;
            default:
              jj_la1[17] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
      break;
    case ASIG:
      jj_consume_token(ASIG);
      jj_consume_token(ID);
      jj_consume_token(PARA);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMA);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
      }
      jj_consume_token(PARC);
      jj_consume_token(PUNTOCOMA);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DecFunction() throws ParseException {
    jj_consume_token(PFUNCION);
    jj_consume_token(ID);
    jj_consume_token(PARA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
    case AMP:
      ParametrosFuction();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    CuerpoFunction();
    jj_consume_token(LLAVEC);
  }

  final public void CuerpoFunction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PVAR:
    case PFUNCION:
    case PECHO:
    case PIF:
    case PSWIT:
    case PWHI:
    case PDO:
    case DOLAR:
    case RESTA:
    case LNOT:
      label_7:
      while (true) {
        CVariables();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PVAR:
        case PFUNCION:
        case PECHO:
        case PIF:
        case PSWIT:
        case PWHI:
        case PDO:
        case DOLAR:
        case RESTA:
        case LNOT:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRETURN:
        CuerpoReturn();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
    case PFOR:
      CuerpoMatriz();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

///****DECLARACION DE MATRIZ******
  final public void CuerpoMatriz() throws ParseException {
    jj_consume_token(PFOR);
    jj_consume_token(PARA);
    ParametrosFOR();
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PFOR:
      jj_consume_token(PFOR);
      jj_consume_token(PARA);
      ParametrosFOR();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      CuerpoFor();
      jj_consume_token(LLAVEC);
      break;
    case DOLAR:
      CuerpoVecFor();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LLAVEC);
    AsignarMatVect();
    Imprimir();
  }

  final public void ParametrosFOR() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    jj_consume_token(NUM);
    jj_consume_token(PUNTOCOMA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(NUM);
    jj_consume_token(PUNTOCOMA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CuerpoFor() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHC);
    jj_consume_token(CORCHA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHC);
    jj_consume_token(IGUAL);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(POR);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(PUNTOCOMA);
  }

  final public void CuerpoVecFor() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHC);
    jj_consume_token(IGUAL);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(PUNTOCOMA);
  }

  final public void AsignarMatVect() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(CORCHA);
    jj_consume_token(NUM);
    jj_consume_token(CORCHC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CORCHA:
      jj_consume_token(CORCHA);
      jj_consume_token(NUM);
      jj_consume_token(CORCHC);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(IGUAL);
    jj_consume_token(NUM);
    jj_consume_token(PUNTOCOMA);
  }

  final public void Imprimir() throws ParseException {
    jj_consume_token(PECHO);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CORCHA:
      jj_consume_token(CORCHA);
      jj_consume_token(NUM);
      jj_consume_token(CORCHC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORCHA:
        jj_consume_token(CORCHA);
        jj_consume_token(NUM);
        jj_consume_token(CORCHC);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUNTO:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_8;
        }
        jj_consume_token(PUNTO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          jj_consume_token(BARRA);
          jj_consume_token(SALTO);
          jj_consume_token(COMILLADOBLE);
          break;
        case DOLAR:
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(PUNTOCOMA);
  }

///*******OPERACIONES ARITMETICAS
  final public void OperacionesArit1() throws ParseException {
    jj_consume_token(RESTA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(PUNTOCOMA);
  }

  final public void OAr() throws ParseException {
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        break;
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case POTEN:
        jj_consume_token(POTEN);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case SUMA:
      case RESTA:
      case DIV:
      case MOD:
      case POTEN:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_10;
      }
    }
  }

  final public void ORe() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL2:
      jj_consume_token(IGUAL2);
      break;
    case IDENT:
      jj_consume_token(IDENT);
      break;
    case DIFE1:
      jj_consume_token(DIFE1);
      break;
    case DIFE2:
      jj_consume_token(DIFE2);
      break;
    case NOIDE:
      jj_consume_token(NOIDE);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case MAYOR:
      jj_consume_token(MAYOR);
      break;
    case MENORI:
      jj_consume_token(MENORI);
      break;
    case MAYORI:
      jj_consume_token(MAYORI);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OLog() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
        jj_consume_token(LAND);
        break;
      case LOR:
        jj_consume_token(LOR);
        break;
      case LXOR:
        jj_consume_token(LXOR);
        break;
      case LNOT:
        jj_consume_token(LNOT);
        break;
      case LAND2:
        jj_consume_token(LAND2);
        break;
      case LOR2:
        jj_consume_token(LOR2);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
      case LOR:
      case LXOR:
      case LNOT:
      case LAND2:
      case LOR2:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_11;
      }
    }
  }

  final public void ParametrosFuction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP:
      jj_consume_token(AMP);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
        jj_consume_token(AMP);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
    }
  }

  final public void CuerpoReturn() throws ParseException {
    jj_consume_token(PRETURN);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(PUNTOCOMA);
  }

  final public void Constructor() throws ParseException {
    jj_consume_token(PFUNCION);
    jj_consume_token(GUIONB);
    jj_consume_token(GUIONB);
    jj_consume_token(PCONST);
    jj_consume_token(PARA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
    case AMP:
      ParametrosFuction();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    jj_consume_token(PECHO);
    jj_consume_token(COMILLADOBLE);
    label_13:
    while (true) {
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_13;
      }
    }
    jj_consume_token(COMILLADOBLE);
    jj_consume_token(PUNTOCOMA);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_14;
      }
      jj_consume_token(DOLAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        jj_consume_token(IGUAL);
        jj_consume_token(PNEW);
        jj_consume_token(ID);
        jj_consume_token(PARA);
        jj_consume_token(PARC);
        jj_consume_token(PUNTOCOMA);
        break;
      case PTHIS:
        MetThis();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PPARENT:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_15;
      }
      MetParent();
    }
    jj_consume_token(LLAVEC);
  }

  final public void MInclude() throws ParseException {
    jj_consume_token(PINCL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARA:
      jj_consume_token(PARA);
      jj_consume_token(COMILLASIMPLE);
      jj_consume_token(ID);
      jj_consume_token(PUNTO);
      jj_consume_token(ID);
      jj_consume_token(COMILLASIMPLE);
      jj_consume_token(PARC);
      break;
    case COMILLADOBLE:
      jj_consume_token(COMILLADOBLE);
      jj_consume_token(ID);
      jj_consume_token(PUNTO);
      jj_consume_token(ID);
      jj_consume_token(COMILLADOBLE);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PUNTOCOMA);
  }

  final public void MetParent() throws ParseException {
    jj_consume_token(PPARENT);
    jj_consume_token(DOBLEP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GUIONB:
      jj_consume_token(GUIONB);
      jj_consume_token(GUIONB);
      jj_consume_token(PCONST);
      jj_consume_token(PARA);
      jj_consume_token(PARC);
      break;
    case ID:
      jj_consume_token(ID);
      jj_consume_token(PARA);
      jj_consume_token(PARC);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PUNTOCOMA);
  }

  final public void MetThis() throws ParseException {
    jj_consume_token(PTHIS);
    jj_consume_token(ASIG);
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case COMILLASIMPLE:
      jj_consume_token(COMILLASIMPLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLASIMPLE);
      break;
    case COMILLADOBLE:
      jj_consume_token(COMILLADOBLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLADOBLE);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PUNTOCOMA);
  }

//*****************SENTENCIAS IF*******************************
  final public void CuerpoIF() throws ParseException {
    jj_consume_token(PIF);
    jj_consume_token(PARA);
    ParametrosIF();
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    SentenciasIF();
    jj_consume_token(LLAVEC);
    jj_consume_token(PELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PIF:
      Elseifs();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    jj_consume_token(LLAVEA);
    SentenciasIF();
    jj_consume_token(LLAVEC);
  }

  final public void Elseifs() throws ParseException {
    label_16:
    while (true) {
      jj_consume_token(PIF);
      jj_consume_token(PARA);
      ParametrosIF();
      jj_consume_token(PARC);
      jj_consume_token(LLAVEA);
      SentenciasIF();
      jj_consume_token(LLAVEC);
      jj_consume_token(PELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIF:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_16;
      }
    }
  }

  final public void ParametrosIF() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    ORe2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case COMILLASIMPLE:
      jj_consume_token(COMILLASIMPLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLASIMPLE);
      break;
    case COMILLADOBLE:
      jj_consume_token(COMILLADOBLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLADOBLE);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAND:
      case LOR:
      case LXOR:
      case LNOT:
      case LAND2:
      case LOR2:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_17;
      }
      OLog2();
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      ORe2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLAR:
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      case COMILLASIMPLE:
        jj_consume_token(COMILLASIMPLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLASIMPLE);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        jj_consume_token(ID);
        jj_consume_token(COMILLADOBLE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NotParametros() throws ParseException {
    jj_consume_token(LNOT);
    jj_consume_token(PARA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    ORe2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case COMILLASIMPLE:
      jj_consume_token(COMILLASIMPLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLASIMPLE);
      break;
    case COMILLADOBLE:
      jj_consume_token(COMILLADOBLE);
      jj_consume_token(ID);
      jj_consume_token(COMILLADOBLE);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARC);
  }

  final public void ORe2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL2:
      jj_consume_token(IGUAL2);
      break;
    case IDENT:
      jj_consume_token(IDENT);
      break;
    case DIFE1:
      jj_consume_token(DIFE1);
      break;
    case DIFE2:
      jj_consume_token(DIFE2);
      break;
    case NOIDE:
      jj_consume_token(NOIDE);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case MAYOR:
      jj_consume_token(MAYOR);
      break;
    case MENORI:
      jj_consume_token(MENORI);
      break;
    case MAYORI:
      jj_consume_token(MAYORI);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OLog2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
      jj_consume_token(LAND);
      break;
    case LOR:
      jj_consume_token(LOR);
      break;
    case LXOR:
      jj_consume_token(LXOR);
      break;
    case LNOT:
      jj_consume_token(LNOT);
      break;
    case LAND2:
      jj_consume_token(LAND2);
      break;
    case LOR2:
      jj_consume_token(LOR2);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OAr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      jj_consume_token(POR);
      break;
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case POTEN:
      jj_consume_token(POTEN);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SentenciasIF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLAR:
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        case DEC:
          jj_consume_token(DEC);
          break;
        case COMILLASIMPLE:
          jj_consume_token(COMILLASIMPLE);
          jj_consume_token(ID);
          jj_consume_token(COMILLASIMPLE);
          break;
        case COMILLADOBLE:
          jj_consume_token(COMILLADOBLE);
          jj_consume_token(ID);
          jj_consume_token(COMILLADOBLE);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case DECR:
      case INC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
          jj_consume_token(INC);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PBREAK:
    case PCONTI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PBREAK:
        jj_consume_token(PBREAK);
        break;
      case PCONTI:
        jj_consume_token(PCONTI);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PUNTOCOMA);
  }

//**************SENTENCIA SWITCH******************
  final public void SentenciaSW() throws ParseException {
    jj_consume_token(PSWIT);
    jj_consume_token(PARA);
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    label_18:
    while (true) {
      SentCase();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PCASE:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_18;
      }
    }
    jj_consume_token(LLAVEC);
  }

  final public void SentCase() throws ParseException {
    jj_consume_token(PCASE);
    jj_consume_token(NUM);
    jj_consume_token(DOSP);
    CuerpoCase();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PDEFAULT:
      jj_consume_token(PDEFAULT);
      jj_consume_token(DOSP);
      CuerpoCase();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
  }

  final public void CuerpoCase() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PECHO:
      Imprimir2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PBREAK:
      case PCONTI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
          jj_consume_token(PBREAK);
          break;
        case PCONTI:
          jj_consume_token(PCONTI);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      break;
    case PBREAK:
    case PCONTI:
    case DOLAR:
      SentenciasIF();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PBREAK:
      case PCONTI:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PBREAK:
          jj_consume_token(PBREAK);
          break;
        case PCONTI:
          jj_consume_token(PCONTI);
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PUNTOCOMA);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      break;
    case PIF:
      CuerpoIF();
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Imprimir2() throws ParseException {
    jj_consume_token(PECHO);
    jj_consume_token(COMILLADOBLE);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case ID:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(COMILLADOBLE);
    jj_consume_token(PUNTOCOMA);
  }

//*****************SENTENCIA WHILE******************************
  final public void SentenciaWh() throws ParseException {
    jj_consume_token(PWHI);
    jj_consume_token(PARA);
    ParametrosIF();
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    label_20:
    while (true) {
      CuerpoWh();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PECHO:
      case PIF:
      case PSWIT:
      case PBREAK:
      case PCONTI:
      case DOLAR:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_20;
      }
    }
    jj_consume_token(LLAVEC);
  }

  final public void CuerpoWh() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PECHO:
      jj_consume_token(PECHO);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(PUNTOCOMA);
      break;
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        jj_consume_token(DOLAR);
        jj_consume_token(ID);
        OAr();
        break;
      case DECR:
      case INC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
          jj_consume_token(INC);
          break;
        case DECR:
          jj_consume_token(DECR);
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
      break;
    case PBREAK:
    case PCONTI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PBREAK:
        jj_consume_token(PBREAK);
        break;
      case PCONTI:
        jj_consume_token(PCONTI);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
      break;
    case PIF:
      CuerpoIF();
      break;
    case PSWIT:
      SentenciaSW();
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//***************SENTENCIA DO WHILE*****************************
  final public void SentenciaDoWh() throws ParseException {
    jj_consume_token(PDO);
    jj_consume_token(LLAVEA);
    label_21:
    while (true) {
      CuerpoWh();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PECHO:
      case PIF:
      case PSWIT:
      case PBREAK:
      case PCONTI:
      case DOLAR:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_21;
      }
    }
    jj_consume_token(LLAVEC);
    jj_consume_token(PWHI);
    jj_consume_token(PARA);
    ParametrosIF();
    jj_consume_token(PARC);
    jj_consume_token(PUNTOCOMA);
  }

  final public void SentenciaFor() throws ParseException {
    jj_consume_token(LNOT);
    jj_consume_token(PFOR);
    jj_consume_token(PARA);
    ParametrosFOR();
    jj_consume_token(PARC);
    jj_consume_token(LLAVEA);
    label_22:
    while (true) {
      CuerpoFor2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PECHO:
      case PIF:
      case PSWIT:
      case PBREAK:
      case PWHI:
      case PCONTI:
      case DOLAR:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_22;
      }
    }
    jj_consume_token(LLAVEC);
  }

  final public void CuerpoFor2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLAR:
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      jj_consume_token(IGUAL);
      jj_consume_token(DOLAR);
      jj_consume_token(ID);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POR:
        case SUMA:
        case RESTA:
        case DIV:
        case MOD:
        case POTEN:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_23;
        }
        OAr2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLAR:
          jj_consume_token(DOLAR);
          jj_consume_token(ID);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        case DEC:
          jj_consume_token(DEC);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(PUNTOCOMA);
      break;
    case PECHO:
      Imprimir();
      break;
    case PBREAK:
    case PCONTI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PBREAK:
        jj_consume_token(PBREAK);
        break;
      case PCONTI:
        jj_consume_token(PCONTI);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTOCOMA);
      break;
    case PIF:
      CuerpoIF();
      break;
    case PSWIT:
      SentenciaSW();
      break;
    case PWHI:
      SentenciaWh();
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MetodoMain() throws ParseException {
    jj_consume_token(DOLAR);
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    jj_consume_token(PNEW);
    jj_consume_token(ID);
    jj_consume_token(PARA);
    jj_consume_token(PARC);
    jj_consume_token(PUNTOCOMA);
  }

  /** Generated Token Manager. */
  public phpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[88];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4040200,0x4000000,0x40000,0x4040200,0x20000000,0x40580000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40580000,0x0,0x0,0x0,0x4400,0x0,0x0,0x1004400,0x0,0x0,0x0,0x40580000,0x800000,0x40780000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x4400,0x0,0x0,0x4400,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x10000800,0x8000000,0x0,0x800,0x4400,0x40000000,0x40000000,0x4400,0x0,0x4400,0x4400,0x0,0x0,0x0,0x4400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40400000,0xc00,0xc00,0x40400000,0x0,0x0,0x0,0x40400000,0x40400000,0x40400000,0x0,0x4400,0x0,0x40400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x1000,0x1000,0x0,0x2001032,0x600,0x800,0x600,0xff860600,0xff860600,0x800,0x600,0x2001032,0x600,0x1f800000,0x1f800000,0x4000,0x1f800000,0x1f800000,0x7000,0x800,0x200,0x1000,0x2001032,0x0,0x2001032,0x1000,0x60000,0x180000,0x200000,0x200000,0x0,0x5000,0x0,0x200000,0x1f800000,0x1000,0x1f800000,0xe0060000,0x1000,0x0,0x0,0x0,0x800,0x0,0x1000,0x0,0x1000,0x0,0x0,0xc000,0x0,0x6000,0x0,0x0,0x7000,0x0,0x7000,0x7000,0xe0060000,0x0,0x1f800000,0x7000,0x180000,0x180200,0x44,0x1044,0x1,0x8,0x44,0x44,0x44,0x44,0x1044,0x0,0x0,0x1046,0x180000,0x180200,0x44,0x1046,0x1046,0x1056,0x1f800000,0x1000,0x44,0x1056,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80,0x800,0x0,0x800,0xbff,0xbff,0x0,0x800,0x80,0x800,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x800,0x400,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x3f0,0x3f0,0x400,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x3f0,0x0,0x0,0xf,0x3f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public php(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public php(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public php(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new phpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public php(phpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(phpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[82];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
