/* Generated By:JavaCC: Do not edit this line. phpTokenManager.java */
package Javacc;
import java.util.*;
import servidor_fileversion.Propiedades;
import servidor_fileversion.TablaSimbolos;
import java.io.StringReader;

/** Token Manager. */
public class phpTokenManager implements phpConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffc0000L) != 0L || (active1 & 0x4070L) != 0L)
         {
            jjmatchedKind = 11;
            return 16;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x7ffffc0000L) != 0L || (active1 & 0x70L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 1;
            }
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x5fbffc0000L) != 0L || (active1 & 0x50L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
            return 16;
         }
         return -1;
      case 3:
         if ((active0 & 0x5fbed40000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
            return 16;
         }
         return -1;
      case 4:
         if ((active0 & 0x5e2e940000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
            return 16;
         }
         return -1;
      case 5:
         if ((active0 & 0x4a2e900000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
            return 16;
         }
         return -1;
      case 6:
         if ((active0 & 0x4826100000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
            return 16;
         }
         return -1;
      case 7:
         if ((active0 & 0x4002100000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
            return 16;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
            return 16;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x2L);
      case 34:
         return jjStopAtPos(0, 46);
      case 36:
         return jjStopAtPos(0, 44);
      case 37:
         return jjStopAtPos(0, 59);
      case 38:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 39:
         return jjStopAtPos(0, 45);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 43);
      case 45:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x800L);
      case 46:
         return jjStopAtPos(0, 76);
      case 47:
         return jjStartNfaWithStates_0(0, 58, 2);
      case 58:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 59:
         return jjStopAtPos(0, 42);
      case 60:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x5L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 53);
      case 92:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 54);
      case 95:
         return jjStopAtPos(0, 80);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4102040000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2800000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xa0400000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x44000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 125:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 32:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 42:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 43:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 45:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 58:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 61:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x2L);
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x108080000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x801800000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80040000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6002200000L, active1, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 37);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1210000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002100000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8280000L, active1, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1a8000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x12040000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4200000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(4, 22);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000L);
      case 80:
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x804000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 36);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x24000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 33);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4002000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(7, 26);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(7, 29);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 38);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(9, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(0);
                  }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(0);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  break;
               case 2:
                  if (curChar == 47)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(5, 7);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar != 47)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(5, 7);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(5, 7);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 7:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(0);
                  }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAdd(0);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(5, 7);
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   10, 11, 12, 2, 4, 5, 6, 8, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\52\57", null, null, null, null, 
null, null, null, null, "\77\76", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\173", "\175", "\75", "\73", "\54", "\44", "\47", "\42", "\50", "\51", "\76", "\74", 
"\55\55", "\53\53", "\133", "\135", "\52", "\53", "\55", "\57", "\45", "\52\52", 
"\75\75", "\75\75\75", "\41\75", "\74\76", "\41\75\75", "\74\75", "\76\75", null, null, 
null, "\41", "\46\46", "\174\174", "\46", "\55\76", "\56", "\134", null, "\72\72", 
"\137", "\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffef81L, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x40L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public phpTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public phpTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                      System.out.println("COMENTARIO_MULTI" );
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("COMENTARIO_MULTI" );
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                                    System.out.println("COMENTARIO_MULTI" );
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                           System.out.println("COMENTARIOSim" );
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("NUMERO -> "+ image + "\u005cr\u005cn");
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        System.out.println("ID -> " + image + "\u005cr\u005cn");
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                        System.out.println("CADENA -> " + image + "\u005cr\u005cn");
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                           System.out.println("DECIMAL -> "+ image + "\u005cr\u005cn");
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("CARACTER -> "+ image + "\u005cr\u005cn");
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("InicioPro -> "+ image + "\u005cr\u005cn");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                         System.out.println("FinPro -> "+ image + "\u005cr\u005cn");
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("P_Class -> "+ image + "\u005cr\u005cn");
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("P_VAR -> "+ image + "\u005cr\u005cn");
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("P_FUCT -> "+ image + "\u005cr\u005cn");
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("P_FOR -> "+ image + "\u005cr\u005cn");
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("P_ECHO -> "+ image + "\u005cr\u005cn");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("P_RETU -> "+ image + "\u005cr\u005cn");
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("P_NEW -> "+ image + "\u005cr\u005cn");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 System.out.println("P_Constru -> "+ image + "\u005cr\u005cn");
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("P_INCLUD -> "+ image + "\u005cr\u005cn");
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("P_PARE -> "+ image + "\u005cr\u005cn");
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("P_THI -> "+ image + "\u005cr\u005cn");
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("P_EXT -> "+ image + "\u005cr\u005cn");
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("P_IF -> "+ image + "\u005cr\u005cn");
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("P_ELSE -> "+ image + "\u005cr\u005cn");
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("P_CASE -> "+ image + "\u005cr\u005cn");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("P_SWIT -> "+ image + "\u005cr\u005cn");
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("P_BREK -> "+ image + "\u005cr\u005cn");
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 System.out.println("P_DEFA -> "+ image + "\u005cr\u005cn");
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("P_WHIL -> "+ image + "\u005cr\u005cn");
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("P_DO -> "+ image + "\u005cr\u005cn");
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("P_CONT -> "+ image + "\u005cr\u005cn");
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                        System.out.println("Llave_Abier -> "+ image + "\u005cr\u005cn");
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                        System.out.println("Llave_Cerra -> "+ image + "\u005cr\u005cn");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                       System.out.println("Igual -> "+ image + "\u005cr\u005cn");
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                           System.out.println("Punto_Coma -> "+ image + "\u005cr\u005cn");
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                      System.out.println("SigComa -> "+ image + "\u005cr\u005cn");
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                       System.out.println("SigDolar -> "+ image + "\u005cr\u005cn");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                               System.out.println("ComillaS -> "+ image + "\u005cr\u005cn");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                               System.out.println("ComillaD -> "+ image + "\u005cr\u005cn");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                      System.out.println("Parente_Abier -> "+ image + "\u005cr\u005cn");
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                      System.out.println("Parente_Cerra -> "+ image + "\u005cr\u005cn");
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                       System.out.println("Mayor -> "+ image + "\u005cr\u005cn");
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                       System.out.println("Menor -> "+ image + "\u005cr\u005cn");
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                       System.out.println("Decremento -> "+ image + "\u005cr\u005cn");
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                      System.out.println("Incremento -> "+ image + "\u005cr\u005cn");
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                        System.out.println("CorcheteA -> "+ image + "\u005cr\u005cn");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                        System.out.println("CorcheteC -> "+ image + "\u005cr\u005cn");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                     System.out.println("SigPor -> "+ image + "\u005cr\u005cn");
         break;
      case 56 :
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                      System.out.println("SigMas -> "+ image + "\u005cr\u005cn");
         break;
      case 57 :
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                       System.out.println("SigMenos -> "+ image + "\u005cr\u005cn");
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                     System.out.println("SigDiv -> "+ image + "\u005cr\u005cn");
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                     System.out.println("SigMod -> "+ image + "\u005cr\u005cn");
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                        System.out.println("Potencia -> "+ image + "\u005cr\u005cn");
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                         System.out.println("Igualdad -> "+ image + "\u005cr\u005cn");
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                         System.out.println("SigIden -> "+ image + "\u005cr\u005cn");
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                        System.out.println("Dif!= -> "+ image + "\u005cr\u005cn");
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                        System.out.println("Dif<> -> "+ image + "\u005cr\u005cn");
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                         System.out.println("Potencia -> "+ image + "\u005cr\u005cn");
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                         System.out.println("MenorQue -> "+ image + "\u005cr\u005cn");
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                         System.out.println("MayorQue -> "+ image + "\u005cr\u005cn");
         break;
      case 68 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("AND -> "+ image + "\u005cr\u005cn");
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("OR -> "+ image + "\u005cr\u005cn");
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("XOR -> "+ image + "\u005cr\u005cn");
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                      System.out.println("NOT -> "+ image + "\u005cr\u005cn");
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                        System.out.println("AND&& -> "+ image + "\u005cr\u005cn");
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                       System.out.println("OR|| -> "+ image + "\u005cr\u005cn");
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                     System.out.println("Amperston -> "+ image + "\u005cr\u005cn");
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                       System.out.println("Asignacion -> "+ image + "\u005cr\u005cn");
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                       System.out.println("Punto -> "+ image + "\u005cr\u005cn");
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                        System.out.println("Barra -> "+ image + "\u005cr\u005cn");
         break;
      case 78 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("SaltoL -> "+ image + "\u005cr\u005cn");
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                         System.out.println("DoblePunto -> "+ image + "\u005cr\u005cn");
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                        System.out.println("GuionBajo -> "+ image + "\u005cr\u005cn");
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                      System.out.println("Dos_Puntos -> "+ image + "\u005cr\u005cn");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
