options {
	IGNORE_CASE = true;
	STATIC = false;
	ERROR_REPORTING = true;
}

PARSER_BEGIN(php)
package Javacc;

import java.util.*;
import servidor_fileversion.Propiedades;
import servidor_fileversion.TablaSimbolos;
import java.io.StringReader;

public class php{
		public Propiedades propiedad = new Propiedades();
		public TablaSimbolos TS = new TablaSimbolos();
		///Variables NORMALES
		public static String VerVar="" ,VerVar2="",VerVar3="",VerVar4="",VerVar5="",VerVar6="",VerVar7="",VerVar8="",VerVar9="",VerVar10="", VerVar11="" ,VerVar12="",VerVar13="",VerVar14="",VerVar15="",VerVar16="",VerVar17="",VerVar18="",VerVar19="",VerVar20="",VerVar21="",VerVar22="",VerVar23="",VerVar24="",VerVar25="";
		public static String OperadorAr="", OperandoAr="", OperadorRe="", OperandoRe="", OperadorLo="", OperandoLo="", OperadorRe2="", OperadorAr2="", OperadorLo2="";
		public static String ValorAsig1="", ValorAsig2="", ValorAsig3="", ValorAsig4="", Simb="";
		public static String ResulVar1="";
		public static String VerVar30 ="";
		public static String cadenaCa ="";
		public static void main(String[] args) throws ParseException{
			try{
				php analizador = new php(new StringReader(""
                                        + "<?php include \"prueba.php\"; "
                                        + "class c1{"
                                        + "function __construct (){"
                                        + "echo \"este es el constructor\";"
                                        + "}\n" +"var $a =10;"
                                        + "var $b =100;"
                                        +"function Method1(){"
                                        +"$a++;"
                                        +"$b++;"
                                        +"echo $a;"
                                        +"echo $b;"
                                        +"}}"
                                        + "?>"));
				analizador.ProgramaInicio();
				System.out.println("------Correctamente Analizado------");
			}catch(ParseException e){
				System.out.println(e.getMessage());
				System.out.println("**Error Sintactico: Se ha encontrado errores en el Analisis");
			}catch(TokenMgrError e){
				System.out.println("**Ha ocurrido un Error Lexico");
				System.out.println(e.getMessage());
			}catch(Exception err){
				System.out.println("**Posible Error Lexico");
				System.out.println(err);
			}
		}
}
PARSER_END(php)

SKIP:{
	" "|"\n"|"\r"|"\r\n"|"\t"
}

MORE: 
{
	 <"/*"~["/"]>{System.out.println("COMENTARIO_MULTI" );}: IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT>
TOKEN:
{
	<FORMAL_COMMENT: "*/">{System.out.println("COMENTARIO_MULTI" );} : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
TOKEN:
{
	<MULTI_LINE_COMMENT: "*/"> {System.out.println("COMENTARIO_MULTI" );} : DEFAULT 
}

TOKEN: 
{
	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" |"\r\n")?>{System.out.println("COMENTARIOSim" );}
}

TOKEN:{
	  <NUM : (["0"-"9"])+> {System.out.println("NUMERO -> "+ image + "\r\n");}
    | <ID : <LETTER>(<LETTER>|<NUM>)*> {System.out.println("ID -> " + image + "\r\n");}
    | <#LETTER: (["a"-"z","A"-"Z"])>
    | <CADENA : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*> {System.out.println("CADENA -> " + image + "\r\n");}
    | <DEC : (["0"-"9"])+"."(["0"-"9"])+> {System.out.println("DECIMAL -> "+ image + "\r\n");}
    | <CARAC : ["a"-"z"]> {System.out.println("CARACTER -> "+ image + "\r\n");}
}

TOKEN:
{
	 <TAGINICIO: "<?php" > {System.out.println("InicioPro -> "+ image + "\r\n");}
	|<TAGFIN: "?>"> {System.out.println("FinPro -> "+ image + "\r\n");}
	|<PCLASS: "class "> {System.out.println("P_Class -> "+ image + "\r\n");}
	|<PVAR: "var "> {System.out.println("P_VAR -> "+ image + "\r\n");}
	|<PFUNCION: "function "> {System.out.println("P_FUCT -> "+ image + "\r\n");}
	|<PFOR: "for "> {System.out.println("P_FOR -> "+ image + "\r\n");}
	|<PECHO: "echo "> {System.out.println("P_ECHO -> "+ image + "\r\n");}
	|<PRETURN: "return "> {System.out.println("P_RETU -> "+ image + "\r\n");}
	|<PNEW: "new "> {System.out.println("P_NEW -> "+ image + "\r\n");}
	|<PCONST: "construct "> {System.out.println("P_Constru -> "+ image + "\r\n");}
	|<PINCL: "include "> {System.out.println("P_INCLUD -> "+ image + "\r\n");}
	|<PPARENT: "parent "> {System.out.println("P_PARE -> "+ image + "\r\n");}
	|<PTHIS: "this "> {System.out.println("P_THI -> "+ image + "\r\n");}
	|<PEXT: "extends "> {System.out.println("P_EXT -> "+ image + "\r\n");}
	|<PIF: "if "> {System.out.println("P_IF -> "+ image + "\r\n");}
	|<PELSE: "else "> {System.out.println("P_ELSE -> "+ image + "\r\n");}
	|<PCASE: "case "> {System.out.println("P_CASE -> "+ image + "\r\n");}
	|<PSWIT: "switch "> {System.out.println("P_SWIT -> "+ image + "\r\n");}
	|<PBREAK: "break "> {System.out.println("P_BREK -> "+ image + "\r\n");}
	|<PDEFAULT: "default "> {System.out.println("P_DEFA -> "+ image + "\r\n");}
	|<PWHI: "while "> {System.out.println("P_WHIL -> "+ image + "\r\n");}
	|<PDO: "do "> {System.out.println("P_DO -> "+ image + "\r\n");}
	|<PCONTI: "continue "> {System.out.println("P_CONT -> "+ image + "\r\n");}
}

TOKEN:
{
	 <LLAVEA: "{"> {System.out.println("Llave_Abier -> "+ image + "\r\n");}
	|<LLAVEC: "}"> {System.out.println("Llave_Cerra -> "+ image + "\r\n");}
	|<IGUAL: "="> {System.out.println("Igual -> "+ image + "\r\n");}
	|<PUNTOCOMA: ";"> {System.out.println("Punto_Coma -> "+ image + "\r\n");}
	|<COMA: ","> {System.out.println("SigComa -> "+ image + "\r\n");}
	|<DOLAR: "$"> {System.out.println("SigDolar -> "+ image + "\r\n");}
	|<COMILLASIMPLE: "'"> {System.out.println("ComillaS -> "+ image + "\r\n");}
	|<COMILLADOBLE: "\""> {System.out.println("ComillaD -> "+ image + "\r\n");}
	|<PARA: "("> {System.out.println("Parente_Abier -> "+ image + "\r\n");}
	|<PARC: ")"> {System.out.println("Parente_Cerra -> "+ image + "\r\n");}
	|<MAYOR: ">"> {System.out.println("Mayor -> "+ image + "\r\n");}
	|<MENOR: "<"> {System.out.println("Menor -> "+ image + "\r\n");}
	|<DECR: "--"> {System.out.println("Decremento -> "+ image + "\r\n");}
	|<INC: "++"> {System.out.println("Incremento -> "+ image + "\r\n");}
	|<CORCHA: "["> {System.out.println("CorcheteA -> "+ image + "\r\n");}
	|<CORCHC: "]"> {System.out.println("CorcheteC -> "+ image + "\r\n");}
	|<POR: "*"> {System.out.println("SigPor -> "+ image + "\r\n");}
	|<SUMA: "+"> {System.out.println("SigMas -> "+ image + "\r\n");}
	|<RESTA: "-"> {System.out.println("SigMenos -> "+ image + "\r\n");}
	|<DIV: "/"> {System.out.println("SigDiv -> "+ image + "\r\n");}
	|<MOD: "%"> {System.out.println("SigMod -> "+ image + "\r\n");}
	|<POTEN: "**"> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<IGUAL2: "=="> {System.out.println("Igualdad -> "+ image + "\r\n");}
	|<IDENT: "==="> {System.out.println("SigIden -> "+ image + "\r\n");}
	|<DIFE1: "!="> {System.out.println("Dif!= -> "+ image + "\r\n");}
	|<DIFE2: "<>"> {System.out.println("Dif<> -> "+ image + "\r\n");}
	|<NOIDE: "!=="> {System.out.println("Potencia -> "+ image + "\r\n");}
	|<MENORI: "<="> {System.out.println("MenorQue -> "+ image + "\r\n");}
	|<MAYORI: ">="> {System.out.println("MayorQue -> "+ image + "\r\n");}
	|<LAND: "and "> {System.out.println("AND -> "+ image + "\r\n");}
	|<LOR: "or "> {System.out.println("OR -> "+ image + "\r\n");}
	|<LXOR: "xor "> {System.out.println("XOR -> "+ image + "\r\n");}
	|<LNOT: "!"> {System.out.println("NOT -> "+ image + "\r\n");}
	|<LAND2: "&&"> {System.out.println("AND&& -> "+ image + "\r\n");}
	|<LOR2: "||"> {System.out.println("OR|| -> "+ image + "\r\n");}
	|<AMP: "&"> {System.out.println("Amperston -> "+ image + "\r\n");}
	|<ASIG: "->"> {System.out.println("Asignacion -> "+ image + "\r\n");}
	|<PUNTO: "."> {System.out.println("Punto -> "+ image + "\r\n");}
	|<BARRA: "\\"> {System.out.println("Barra -> "+ image + "\r\n");}
	|<SALTO: "n "> {System.out.println("SaltoL -> "+ image + "\r\n");}
	|<DOBLEP: "::"> {System.out.println("DoblePunto -> "+ image + "\r\n");}
	|<GUIONB: "_"> {System.out.println("GuionBajo -> "+ image + "\r\n");}
	|<DOSP: ":"> {System.out.println("Dos_Puntos -> "+ image + "\r\n");}
}
///INICIO DE GRAMATICA
void ProgramaInicio():{} //Aqui se declaran variables y objetos de javacc
{
	<TAGINICIO>(CuerpoPrograma())+<TAGFIN>
}

void CuerpoPrograma():{Token T1;}
{
	 CuerpoComentario()
	|(MInclude())*(Clase()|MetodoMain())
}

void CuerpoComentario():{}
{
	<SINGLE_LINE_COMMENT>
}

void Clase():{Token T2;}
{
	<PCLASS> <ID>(<PEXT><ID>)?<LLAVEA>Constructor() CuerpoClase() <LLAVEC>
}

void CuerpoClase():{}
{
	 (CVariables())+
}


void CVariables():{Token Ids, InDe=null;}
{
	 <PVAR><DOLAR> Ids = <ID> {propiedad.setNombre(Ids.image); if(Ids.image.equals("a")){VerVar=Ids.image;} if(Ids.image.equals("b")){VerVar2=Ids.image;} if(Ids.image.equals("c")){VerVar3=Ids.image;} 
	 														   if(Ids.image.equals("d")){VerVar4=Ids.image;} if(Ids.image.equals("e")){VerVar5=Ids.image;} if(Ids.image.equals("f")){VerVar6=Ids.image;} 
	 														   if(Ids.image.equals("g")){VerVar7=Ids.image;} if(Ids.image.equals("h")){VerVar8=Ids.image;} if(Ids.image.equals("i")){VerVar9=Ids.image;} 
	 														   if(Ids.image.equals("j")){VerVar10=Ids.image;} if(Ids.image.equals("k")){VerVar11=Ids.image;} if(Ids.image.equals("l")){VerVar12=Ids.image;} 
	 														   if(Ids.image.equals("m")){VerVar13=Ids.image;} if(Ids.image.equals("n")){VerVar14=Ids.image;} if(Ids.image.equals("o")){VerVar15=Ids.image;} 
	 														   if(Ids.image.equals("p")){VerVar16=Ids.image;} if(Ids.image.equals("q")){VerVar17=Ids.image;} if(Ids.image.equals("r")){VerVar18=Ids.image;} 
	 														   if(Ids.image.equals("s")){VerVar19=Ids.image;} if(Ids.image.equals("t")){VerVar20=Ids.image;} if(Ids.image.equals("u")){VerVar21=Ids.image;} 
	 														   if(Ids.image.equals("w")){VerVar22=Ids.image;} if(Ids.image.equals("x")){VerVar23=Ids.image;} if(Ids.image.equals("y")){VerVar24=Ids.image;} 
	 														   if(Ids.image.equals("z")){VerVar25=Ids.image;} 
	 						  }
	 											(TVariable())? 
	 											(<COMA><DOLAR> Ids =<ID>(TVariable())?)*  //VARIABLES GLOBALES 
	|<DOLAR> Ids = <ID> (TVariable() {VerVar30=Ids.image;}
						|OAr()<PUNTOCOMA>
						|ORe()<PUNTOCOMA>
						|OLog()<PUNTOCOMA>
						|(InDe = <INC>  
							|InDe = <DECR>)<PUNTOCOMA>)? {Simb=InDe.image; if(Simb.equals("++")){
																				//System.out.println("**"+ValorAsig1+"**"+ValorAsig2+"**");
																				if(VerVar != ""){
																					int variableL = Integer.parseInt(ValorAsig1);
																					System.out.println("*********DEC-INC1++********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}if(VerVar2 != ""){
																					int variableL = Integer.parseInt(ValorAsig2);
																					System.out.println("*********DEC-INC2++********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}if(VerVar3 != ""){
																					int variableL = Integer.parseInt(ValorAsig3);
																					System.out.println("*********DEC-INC3++********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}if(VerVar4 != ""){
																					int variableL = Integer.parseInt(ValorAsig4);
																					System.out.println("*********DEC-INC4++********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}
																			}if(Simb.equals("--")){
																				if(VerVar != ""){
																					int variableL = Integer.parseInt(ValorAsig1);
																					System.out.println("*********DEC-INC1--********"); 
																					int RES = variableL - 1;
																			   		System.out.println(VerVar +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}if(VerVar2 != ""){
																					int variableL = Integer.parseInt(ValorAsig2);
																					System.out.println("*********DEC-INC2--********"); 
																					int RES = variableL - 1;
																			   		System.out.println(VerVar2 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}	if(VerVar3 != ""){
																					int variableL = Integer.parseInt(ValorAsig3);
																					System.out.println("*********DEC-INC3--********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar3 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}if(VerVar4 != ""){
																					int variableL = Integer.parseInt(ValorAsig4);
																					System.out.println("*********DEC-INC4--********"); 
																					int RES = variableL + 1;
																			   		System.out.println(VerVar4 +" = "+ Simb + "-->" + RES); 
																			   		System.out.println("*******************");
																				}																			
																			}
														  }
						(<COMA><DOLAR><ID>(TVariable())?)*   //VARIABLES LOCALES             
	|DecFunction()
	|OperacionesArit1()
	|Imprimir()
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()
	|SentenciaDoWh()
	|SentenciaFor()
}
void TVariable():{}
{
	(AsignacionVar()|<PUNTOCOMA>)
}
void AsignacionVar():{Token IdAsgi, ValAsig;}
{
	 <IGUAL>(<COMILLASIMPLE>IdAsgi=<ID><COMILLASIMPLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |<PNEW> <ID><PARA><PARC>
	 	     |<COMILLADOBLE>IdAsgi=<ID><COMILLADOBLE>{ValorAsig1=IdAsgi.image; System.out.println("*********VAR********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |ValAsig=<NUM>(OAr())? {if(ValorAsig5.equals("") && ValorAsig4 != ""){
	 	     							ValorAsig5=ValAsig.image;
	 	     							System.out.println("**"+ValorAsig1+"**");
	 	     						 }if(ValorAsig4.equals("") && ValorAsig3 != ""){
	 	     							ValorAsig4=ValAsig.image;
	 	     							System.out.println("**"+ValorAsig1+"**");
	 	     						 }if(ValorAsig3.equals("") && ValorAsig2 != ""){
	 	     							ValorAsig3=ValAsig.image;
	 	     							System.out.println("**"+ValorAsig2+"**");
	 	     						 }if(ValorAsig2.equals("") && ValorAsig1 != ""){
	 	     							ValorAsig2=ValAsig.image;
	 	     						 }if(ValorAsig1.equals("")){
	 	     							ValorAsig1=ValAsig.image;
	 	     						 }
	 	     													System.out.println("*********VAR********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |ValAsig=<DEC>(OAr())? {ValorAsig1=ValAsig.image; System.out.println("*********VAR********"); System.out.println(VerVar +" = "+ ValorAsig1); System.out.println("*******************");}
	 	     |<DOLAR>IdAsgi=<ID>(OAr()
	 	     				|<PUNTO>(<COMILLADOBLE><ID><COMILLADOBLE>|<NUM>|<DEC>))?)<PUNTOCOMA>
	|<ASIG><ID><PARA><DOLAR><ID>(<COMA><DOLAR><ID>)*<PARC><PUNTOCOMA>
}

void DecFunction():{}{ //DEFINICION DE METODOS Y FUNCIONES
	<PFUNCION><ID><PARA>(ParametrosFuction())?<PARC><LLAVEA>CuerpoFunction()<LLAVEC>
}

void CuerpoFunction():{}
{
	 ((CVariables())+(CuerpoReturn())?|CuerpoMatriz())
}
///****DECLARACION DE MATRIZ******
void CuerpoMatriz():{}
{
	 <PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(<PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>CuerpoFor()<LLAVEC>|CuerpoVecFor()/*DEC. VEC.*/)<LLAVEC>AsignarMatVect()Imprimir()
}
void ParametrosFOR():{}
{
	<DOLAR><ID><IGUAL><NUM><PUNTOCOMA> <DOLAR><ID>(<MAYOR>|<MENOR>)<NUM><PUNTOCOMA> <DOLAR><ID>(<INC>|<DECR>)
}

void CuerpoFor():{}
{
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><POR><DOLAR><ID><PUNTOCOMA>
}
void CuerpoVecFor():{}
{
	<DOLAR><ID><CORCHA><DOLAR><ID><CORCHC><IGUAL><DOLAR><ID><PUNTOCOMA>
}
void AsignarMatVect():{}
{
	<DOLAR><ID><CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?<IGUAL><NUM><PUNTOCOMA>
}
void Imprimir():{}
{
	<PECHO><DOLAR><ID>(<CORCHA><NUM><CORCHC>(<CORCHA><NUM><CORCHC>)?|(<PUNTO>(<COMILLADOBLE><BARRA><SALTO><COMILLADOBLE>|<DOLAR><ID>))*|<COMILLADOBLE>(<ID>)+<COMILLADOBLE>)<PUNTOCOMA>
}
///*******OPERACIONES ARITMETICAS
void OperacionesArit1():{}
{
	 <RESTA><DOLAR><ID><PUNTOCOMA>
	
}
void OAr():{Token OperA; Token OperandA;} /// OPERACIONES ARITMETICAS CON OPERANDOS
{
	((OperA=<POR>{OperadorAr=OperA.image;}
	|OperA=<SUMA>{OperadorAr=OperA.image;}
	|OperA=<DIV>{OperadorAr=OperA.image;}
	|OperA=<POTEN>{OperadorAr=OperA.image;}
	|OperA=<MOD>{OperadorAr=OperA.image;}
	|OperA=<RESTA>{OperadorAr=OperA.image;})
		(<DOLAR> OperandA=<ID>{OperandoAr=OperandA.image;}
			|OperandA=<NUM>{OperandoAr=OperandA.image;}
			|OperandA=<DEC>{OperandoAr=OperandA.image;}))+
}

void ORe():{Token OperR, OperandR;}/// OPERACIONES RELACIONALES CON OPERANDOS
{
	(OperR=<IGUAL2>{OperadorRe=OperR.image;}
	|OperR=<IDENT>{OperadorRe=OperR.image;}
	|OperR=<DIFE1>{OperadorRe=OperR.image;}
	|OperR=<DIFE2>{OperadorRe=OperR.image;}
	|OperR=<NOIDE>{OperadorRe=OperR.image;}
	|OperR=<MENOR>{OperadorRe=OperR.image;}
	|OperR=<MAYOR>{OperadorRe=OperR.image;}
	|OperR=<MENORI>{OperadorRe=OperR.image;}
	|OperR=<MAYORI>{OperadorRe=OperR.image;})
		(<DOLAR>OperandR=<ID>{OperandoRe =OperandR.image;}
			   |OperandR=<NUM>{OperandoRe =OperandR.image;}
			   |OperandR=<DEC>{OperandoRe =OperandR.image;})
}

void OLog():{Token OperL, OperandL;}///OPERACIONES LOGICAS CON OPERANDOS
{
	((OperL=<LAND>{OperadorLo=OperL.image;}
	 |OperL=<LOR>{OperadorLo=OperL.image;}
	 |OperL=<LXOR>{OperadorLo=OperL.image;}
	 |OperL=<LNOT>{OperadorLo=OperL.image;}
	 |OperL=<LAND2>{OperadorLo=OperL.image;}
	 |OperL=<LOR2>{OperadorLo=OperL.image;}
	    )<DOLAR>OperandL=<ID>{OperandoLo=OperandL.image;})+
}

void ParametrosFuction():{}//PARAMETROS DE LAS FUNCIONES
{
	(<AMP>)?<DOLAR><ID>(<COMA>(<AMP>)?<DOLAR><ID>)*
}

void CuerpoReturn():{}
{
	 <PRETURN><DOLAR><ID><PUNTOCOMA>
}

void Constructor():{Token IdsCons, NumCons;}
{
	<PFUNCION><GUIONB><GUIONB><PCONST><PARA>(ParametrosFuction())?<PARC><LLAVEA>
						<PECHO><COMILLADOBLE>(IdsCons=<ID>{cadenaCa= cadenaCa + IdsCons.image +" ";})+<COMILLADOBLE><PUNTOCOMA>
						(<DOLAR>(<ID><IGUAL><PNEW><ID><PARA><PARC><PUNTOCOMA>|MetThis()))*(MetParent())*<LLAVEC> {System.out.println("*******ECHO CONST*******"); System.out.println(cadenaCa); System.out.println("****************");}
}

void MInclude():{}
{
	<PINCL>(<PARA><COMILLASIMPLE><ID><PUNTO><ID><COMILLASIMPLE><PARC>|<COMILLADOBLE><ID><PUNTO><ID><COMILLADOBLE>)<PUNTOCOMA>
}

void MetParent():{}
{
	<PPARENT><DOBLEP>(<GUIONB><GUIONB><PCONST><PARA><PARC>|<ID><PARA><PARC>)<PUNTOCOMA>
}
void MetThis():{}
{
	<PTHIS><ASIG><ID><IGUAL>(<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PUNTOCOMA>
}
//*****************SENTENCIAS IF*******************************
void CuerpoIF():{}
{
	<PIF><PARA>ParametrosIF()<PARC><LLAVEA>SentenciasIF()<LLAVEC><PELSE>(Elseifs())?<LLAVEA>SentenciasIF()<LLAVEC>/*(<PELSE><LLAVEA><LLAVEC>)?*/
}
void Elseifs():{}
{
	(<PIF><PARA>ParametrosIF()<PARC><LLAVEA>SentenciasIF()<LLAVEC><PELSE>)+
}

void ParametrosIF():{}
{
	<DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)(OLog2()<DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>))*
}
void NotParametros():{} //!($b==0)
{
	<LNOT><PARA><DOLAR><ID>ORe2()(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)<PARC>
}
void ORe2():{Token OperadorR2;} /// OPERACIONES RELACIONALES SIN OPERANDOS
{
	(OperadorR2=<IGUAL2>{OperadorRe2=OperadorR2.image;}
	|OperadorR2=<IDENT>
	|OperadorR2=<DIFE1>
	|OperadorR2=<DIFE2>
	|OperadorR2=<NOIDE>
	|OperadorR2=<MENOR>
	|OperadorR2=<MAYOR>
	|OperadorR2=<MENORI>
	|OperadorR2=<MAYORI>)
}
void OLog2():{} /// OPEACIONES LOGICAS SIN OPERENADOS
{
	(<LAND>|<LOR>|<LXOR>|<LNOT>|<LAND2>|<LOR2>)
}
void OAr2():{} /// OPERACIONES ARITMETICAS SIN OPERANDOS
{
	(<POR>|<SUMA>|<DIV>|<POTEN>|<MOD>|<RESTA>)
}
void SentenciasIF():{}
{
	(<DOLAR><ID>(<IGUAL>(<DOLAR><ID>|<NUM>|<DEC>|<COMILLASIMPLE><ID><COMILLASIMPLE>|<COMILLADOBLE><ID><COMILLADOBLE>)|(<INC>|<DECR>))|(<PBREAK>|<PCONTI>))<PUNTOCOMA>
}

//**************SENTENCIA SWITCH******************
void SentenciaSW():{}
{
	<PSWIT><PARA><DOLAR><ID><PARC><LLAVEA>(SentCase())+<LLAVEC>
}
void SentCase():{}
{
	<PCASE><NUM><DOSP>CuerpoCase()(<PDEFAULT><DOSP>CuerpoCase())?
}
void CuerpoCase():{}
{
	 Imprimir2() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|SentenciasIF() ((<PBREAK>|<PCONTI>)<PUNTOCOMA>)?
	|CuerpoIF()
}
void Imprimir2():{Token IdsImp2; Token NumImp2;}
{
	<PECHO>(<COMILLADOBLE>(IdsImp2=<ID> {System.out.println("**************"); System.out.println(IdsImp2.image); System.out.println("**************");}
		|NumImp2=<NUM> {System.out.println("**************"); System.out.println(NumImp2.image); System.out.println("**************");}
		)*<COMILLADOBLE>)<PUNTOCOMA>
}
//*****************SENTENCIA WHILE******************************
void SentenciaWh():{}
{
	<PWHI><PARA>ParametrosIF()<PARC><LLAVEA>(CuerpoWh())+<LLAVEC>
}
void CuerpoWh():{}
{
	 <PECHO><DOLAR><ID><PUNTOCOMA>
	|<DOLAR><ID>(<IGUAL><DOLAR><ID>OAr()|(<INC>|<DECR>))<PUNTOCOMA>
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|SentenciaSW()
}
//***************SENTENCIA DO WHILE*****************************
void SentenciaDoWh():{}
{
	<PDO><LLAVEA>(CuerpoWh())+<LLAVEC><PWHI><PARA>ParametrosIF()<PARC><PUNTOCOMA>
}
void SentenciaFor():{}
{
	<LNOT><PFOR><PARA>ParametrosFOR()<PARC><LLAVEA>(CuerpoFor2())+<LLAVEC>
}
void CuerpoFor2():{}
{
	<DOLAR><ID><IGUAL><DOLAR><ID>(OAr2()(<DOLAR><ID>|<NUM>|<DEC>))*<PUNTOCOMA>
	|Imprimir()
	|(<PBREAK>|<PCONTI>)<PUNTOCOMA>
	|CuerpoIF()
	|SentenciaSW()
	|SentenciaWh()
}
void MetodoMain():{}
{
	<DOLAR><ID><IGUAL><PNEW><ID><PARA><PARC><PUNTOCOMA>
}