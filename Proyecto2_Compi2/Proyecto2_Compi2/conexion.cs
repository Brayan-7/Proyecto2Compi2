/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Proyecto2_Compi2
{
  public partial class conexion {
    public interface Iface {
      string DoLog(string instruccion);
      #if SILVERLIGHT
      IAsyncResult Begin_DoLog(AsyncCallback callback, object state, string instruccion);
      string End_DoLog(IAsyncResult asyncResult);
      #endif
      string DoRepo(string repo);
      #if SILVERLIGHT
      IAsyncResult Begin_DoRepo(AsyncCallback callback, object state, string repo);
      string End_DoRepo(IAsyncResult asyncResult);
      #endif
      string DelRepo(string repo);
      #if SILVERLIGHT
      IAsyncResult Begin_DelRepo(AsyncCallback callback, object state, string repo);
      string End_DelRepo(IAsyncResult asyncResult);
      #endif
      string SWRepo(string repoA, string repoN);
      #if SILVERLIGHT
      IAsyncResult Begin_SWRepo(AsyncCallback callback, object state, string repoA, string repoN);
      string End_SWRepo(IAsyncResult asyncResult);
      #endif
      string UpFiles(int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2);
      #if SILVERLIGHT
      IAsyncResult Begin_UpFiles(AsyncCallback callback, object state, int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2);
      string End_UpFiles(IAsyncResult asyncResult);
      #endif
      string Update(string repo);
      #if SILVERLIGHT
      IAsyncResult Begin_Update(AsyncCallback callback, object state, string repo);
      string End_Update(IAsyncResult asyncResult);
      #endif
      string UpdateKey(string llave);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateKey(AsyncCallback callback, object state, string llave);
      string End_UpdateKey(IAsyncResult asyncResult);
      #endif
      string PruebaR(string llaveU, string llaveC);
      #if SILVERLIGHT
      IAsyncResult Begin_PruebaR(AsyncCallback callback, object state, string llaveU, string llaveC);
      string End_PruebaR(IAsyncResult asyncResult);
      #endif
      string Prueba3D(string llaveU);
      #if SILVERLIGHT
      IAsyncResult Begin_Prueba3D(AsyncCallback callback, object state, string llaveU);
      string End_Prueba3D(IAsyncResult asyncResult);
      #endif
      string Release3Do(string llaveU);
      #if SILVERLIGHT
      IAsyncResult Begin_Release3Do(AsyncCallback callback, object state, string llaveU);
      string End_Release3Do(IAsyncResult asyncResult);
      #endif
      string Release3D(string llaveU);
      #if SILVERLIGHT
      IAsyncResult Begin_Release3D(AsyncCallback callback, object state, string llaveU);
      string End_Release3D(IAsyncResult asyncResult);
      #endif
      string ReleaseASM(string llaveU);
      #if SILVERLIGHT
      IAsyncResult Begin_ReleaseASM(AsyncCallback callback, object state, string llaveU);
      string End_ReleaseASM(IAsyncResult asyncResult);
      #endif
      string Release(string llaveU);
      #if SILVERLIGHT
      IAsyncResult Begin_Release(AsyncCallback callback, object state, string llaveU);
      string End_Release(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_DoLog(AsyncCallback callback, object state, string instruccion)
      {
        return send_DoLog(callback, state, instruccion);
      }

      public string End_DoLog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoLog();
      }

      #endif

      public string DoLog(string instruccion)
      {
        #if !SILVERLIGHT
        send_DoLog(instruccion);
        return recv_DoLog();

        #else
        var asyncResult = Begin_DoLog(null, null, instruccion);
        return End_DoLog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoLog(AsyncCallback callback, object state, string instruccion)
      #else
      public void send_DoLog(string instruccion)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DoLog", TMessageType.Call, seqid_));
        DoLog_args args = new DoLog_args();
        args.Instruccion = instruccion;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DoLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoLog_result result = new DoLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoLog failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DoRepo(AsyncCallback callback, object state, string repo)
      {
        return send_DoRepo(callback, state, repo);
      }

      public string End_DoRepo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoRepo();
      }

      #endif

      public string DoRepo(string repo)
      {
        #if !SILVERLIGHT
        send_DoRepo(repo);
        return recv_DoRepo();

        #else
        var asyncResult = Begin_DoRepo(null, null, repo);
        return End_DoRepo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoRepo(AsyncCallback callback, object state, string repo)
      #else
      public void send_DoRepo(string repo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DoRepo", TMessageType.Call, seqid_));
        DoRepo_args args = new DoRepo_args();
        args.Repo = repo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DoRepo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoRepo_result result = new DoRepo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoRepo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DelRepo(AsyncCallback callback, object state, string repo)
      {
        return send_DelRepo(callback, state, repo);
      }

      public string End_DelRepo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DelRepo();
      }

      #endif

      public string DelRepo(string repo)
      {
        #if !SILVERLIGHT
        send_DelRepo(repo);
        return recv_DelRepo();

        #else
        var asyncResult = Begin_DelRepo(null, null, repo);
        return End_DelRepo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DelRepo(AsyncCallback callback, object state, string repo)
      #else
      public void send_DelRepo(string repo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DelRepo", TMessageType.Call, seqid_));
        DelRepo_args args = new DelRepo_args();
        args.Repo = repo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_DelRepo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DelRepo_result result = new DelRepo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelRepo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SWRepo(AsyncCallback callback, object state, string repoA, string repoN)
      {
        return send_SWRepo(callback, state, repoA, repoN);
      }

      public string End_SWRepo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SWRepo();
      }

      #endif

      public string SWRepo(string repoA, string repoN)
      {
        #if !SILVERLIGHT
        send_SWRepo(repoA, repoN);
        return recv_SWRepo();

        #else
        var asyncResult = Begin_SWRepo(null, null, repoA, repoN);
        return End_SWRepo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SWRepo(AsyncCallback callback, object state, string repoA, string repoN)
      #else
      public void send_SWRepo(string repoA, string repoN)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SWRepo", TMessageType.Call, seqid_));
        SWRepo_args args = new SWRepo_args();
        args.RepoA = repoA;
        args.RepoN = repoN;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_SWRepo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SWRepo_result result = new SWRepo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SWRepo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpFiles(AsyncCallback callback, object state, int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2)
      {
        return send_UpFiles(callback, state, Llave, instr, NomArch, SubCarp, Conten, Proyecto, SubCarp2);
      }

      public string End_UpFiles(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpFiles();
      }

      #endif

      public string UpFiles(int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2)
      {
        #if !SILVERLIGHT
        send_UpFiles(Llave, instr, NomArch, SubCarp, Conten, Proyecto, SubCarp2);
        return recv_UpFiles();

        #else
        var asyncResult = Begin_UpFiles(null, null, Llave, instr, NomArch, SubCarp, Conten, Proyecto, SubCarp2);
        return End_UpFiles(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpFiles(AsyncCallback callback, object state, int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2)
      #else
      public void send_UpFiles(int Llave, string instr, string NomArch, string SubCarp, string Conten, string Proyecto, string SubCarp2)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpFiles", TMessageType.Call, seqid_));
        UpFiles_args args = new UpFiles_args();
        args.Llave = Llave;
        args.Instr = instr;
        args.NomArch = NomArch;
        args.SubCarp = SubCarp;
        args.Conten = Conten;
        args.Proyecto = Proyecto;
        args.SubCarp2 = SubCarp2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_UpFiles()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpFiles_result result = new UpFiles_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpFiles failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Update(AsyncCallback callback, object state, string repo)
      {
        return send_Update(callback, state, repo);
      }

      public string End_Update(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Update();
      }

      #endif

      public string Update(string repo)
      {
        #if !SILVERLIGHT
        send_Update(repo);
        return recv_Update();

        #else
        var asyncResult = Begin_Update(null, null, repo);
        return End_Update(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Update(AsyncCallback callback, object state, string repo)
      #else
      public void send_Update(string repo)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Update", TMessageType.Call, seqid_));
        Update_args args = new Update_args();
        args.Repo = repo;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Update()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Update_result result = new Update_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Update failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateKey(AsyncCallback callback, object state, string llave)
      {
        return send_UpdateKey(callback, state, llave);
      }

      public string End_UpdateKey(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateKey();
      }

      #endif

      public string UpdateKey(string llave)
      {
        #if !SILVERLIGHT
        send_UpdateKey(llave);
        return recv_UpdateKey();

        #else
        var asyncResult = Begin_UpdateKey(null, null, llave);
        return End_UpdateKey(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateKey(AsyncCallback callback, object state, string llave)
      #else
      public void send_UpdateKey(string llave)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateKey", TMessageType.Call, seqid_));
        UpdateKey_args args = new UpdateKey_args();
        args.Llave = llave;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_UpdateKey()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateKey_result result = new UpdateKey_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateKey failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PruebaR(AsyncCallback callback, object state, string llaveU, string llaveC)
      {
        return send_PruebaR(callback, state, llaveU, llaveC);
      }

      public string End_PruebaR(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PruebaR();
      }

      #endif

      public string PruebaR(string llaveU, string llaveC)
      {
        #if !SILVERLIGHT
        send_PruebaR(llaveU, llaveC);
        return recv_PruebaR();

        #else
        var asyncResult = Begin_PruebaR(null, null, llaveU, llaveC);
        return End_PruebaR(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PruebaR(AsyncCallback callback, object state, string llaveU, string llaveC)
      #else
      public void send_PruebaR(string llaveU, string llaveC)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PruebaR", TMessageType.Call, seqid_));
        PruebaR_args args = new PruebaR_args();
        args.LlaveU = llaveU;
        args.LlaveC = llaveC;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PruebaR()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PruebaR_result result = new PruebaR_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PruebaR failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Prueba3D(AsyncCallback callback, object state, string llaveU)
      {
        return send_Prueba3D(callback, state, llaveU);
      }

      public string End_Prueba3D(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Prueba3D();
      }

      #endif

      public string Prueba3D(string llaveU)
      {
        #if !SILVERLIGHT
        send_Prueba3D(llaveU);
        return recv_Prueba3D();

        #else
        var asyncResult = Begin_Prueba3D(null, null, llaveU);
        return End_Prueba3D(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Prueba3D(AsyncCallback callback, object state, string llaveU)
      #else
      public void send_Prueba3D(string llaveU)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Prueba3D", TMessageType.Call, seqid_));
        Prueba3D_args args = new Prueba3D_args();
        args.LlaveU = llaveU;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Prueba3D()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Prueba3D_result result = new Prueba3D_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Prueba3D failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Release3Do(AsyncCallback callback, object state, string llaveU)
      {
        return send_Release3Do(callback, state, llaveU);
      }

      public string End_Release3Do(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Release3Do();
      }

      #endif

      public string Release3Do(string llaveU)
      {
        #if !SILVERLIGHT
        send_Release3Do(llaveU);
        return recv_Release3Do();

        #else
        var asyncResult = Begin_Release3Do(null, null, llaveU);
        return End_Release3Do(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Release3Do(AsyncCallback callback, object state, string llaveU)
      #else
      public void send_Release3Do(string llaveU)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Release3Do", TMessageType.Call, seqid_));
        Release3Do_args args = new Release3Do_args();
        args.LlaveU = llaveU;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Release3Do()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Release3Do_result result = new Release3Do_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Release3Do failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Release3D(AsyncCallback callback, object state, string llaveU)
      {
        return send_Release3D(callback, state, llaveU);
      }

      public string End_Release3D(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Release3D();
      }

      #endif

      public string Release3D(string llaveU)
      {
        #if !SILVERLIGHT
        send_Release3D(llaveU);
        return recv_Release3D();

        #else
        var asyncResult = Begin_Release3D(null, null, llaveU);
        return End_Release3D(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Release3D(AsyncCallback callback, object state, string llaveU)
      #else
      public void send_Release3D(string llaveU)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Release3D", TMessageType.Call, seqid_));
        Release3D_args args = new Release3D_args();
        args.LlaveU = llaveU;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Release3D()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Release3D_result result = new Release3D_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Release3D failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ReleaseASM(AsyncCallback callback, object state, string llaveU)
      {
        return send_ReleaseASM(callback, state, llaveU);
      }

      public string End_ReleaseASM(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ReleaseASM();
      }

      #endif

      public string ReleaseASM(string llaveU)
      {
        #if !SILVERLIGHT
        send_ReleaseASM(llaveU);
        return recv_ReleaseASM();

        #else
        var asyncResult = Begin_ReleaseASM(null, null, llaveU);
        return End_ReleaseASM(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ReleaseASM(AsyncCallback callback, object state, string llaveU)
      #else
      public void send_ReleaseASM(string llaveU)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ReleaseASM", TMessageType.Call, seqid_));
        ReleaseASM_args args = new ReleaseASM_args();
        args.LlaveU = llaveU;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_ReleaseASM()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ReleaseASM_result result = new ReleaseASM_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ReleaseASM failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Release(AsyncCallback callback, object state, string llaveU)
      {
        return send_Release(callback, state, llaveU);
      }

      public string End_Release(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Release();
      }

      #endif

      public string Release(string llaveU)
      {
        #if !SILVERLIGHT
        send_Release(llaveU);
        return recv_Release();

        #else
        var asyncResult = Begin_Release(null, null, llaveU);
        return End_Release(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Release(AsyncCallback callback, object state, string llaveU)
      #else
      public void send_Release(string llaveU)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Release", TMessageType.Call, seqid_));
        Release_args args = new Release_args();
        args.LlaveU = llaveU;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_Release()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Release_result result = new Release_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Release failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["DoLog"] = DoLog_Process;
        processMap_["DoRepo"] = DoRepo_Process;
        processMap_["DelRepo"] = DelRepo_Process;
        processMap_["SWRepo"] = SWRepo_Process;
        processMap_["UpFiles"] = UpFiles_Process;
        processMap_["Update"] = Update_Process;
        processMap_["UpdateKey"] = UpdateKey_Process;
        processMap_["PruebaR"] = PruebaR_Process;
        processMap_["Prueba3D"] = Prueba3D_Process;
        processMap_["Release3Do"] = Release3Do_Process;
        processMap_["Release3D"] = Release3D_Process;
        processMap_["ReleaseASM"] = ReleaseASM_Process;
        processMap_["Release"] = Release_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void DoLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoLog_args args = new DoLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoLog_result result = new DoLog_result();
        result.Success = iface_.DoLog(args.Instruccion);
        oprot.WriteMessageBegin(new TMessage("DoLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoRepo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoRepo_args args = new DoRepo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoRepo_result result = new DoRepo_result();
        result.Success = iface_.DoRepo(args.Repo);
        oprot.WriteMessageBegin(new TMessage("DoRepo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DelRepo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DelRepo_args args = new DelRepo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DelRepo_result result = new DelRepo_result();
        result.Success = iface_.DelRepo(args.Repo);
        oprot.WriteMessageBegin(new TMessage("DelRepo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SWRepo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SWRepo_args args = new SWRepo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SWRepo_result result = new SWRepo_result();
        result.Success = iface_.SWRepo(args.RepoA, args.RepoN);
        oprot.WriteMessageBegin(new TMessage("SWRepo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpFiles_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpFiles_args args = new UpFiles_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpFiles_result result = new UpFiles_result();
        result.Success = iface_.UpFiles(args.Llave, args.Instr, args.NomArch, args.SubCarp, args.Conten, args.Proyecto, args.SubCarp2);
        oprot.WriteMessageBegin(new TMessage("UpFiles", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Update_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Update_args args = new Update_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Update_result result = new Update_result();
        result.Success = iface_.Update(args.Repo);
        oprot.WriteMessageBegin(new TMessage("Update", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateKey_args args = new UpdateKey_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateKey_result result = new UpdateKey_result();
        result.Success = iface_.UpdateKey(args.Llave);
        oprot.WriteMessageBegin(new TMessage("UpdateKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PruebaR_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PruebaR_args args = new PruebaR_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PruebaR_result result = new PruebaR_result();
        result.Success = iface_.PruebaR(args.LlaveU, args.LlaveC);
        oprot.WriteMessageBegin(new TMessage("PruebaR", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Prueba3D_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Prueba3D_args args = new Prueba3D_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Prueba3D_result result = new Prueba3D_result();
        result.Success = iface_.Prueba3D(args.LlaveU);
        oprot.WriteMessageBegin(new TMessage("Prueba3D", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Release3Do_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Release3Do_args args = new Release3Do_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Release3Do_result result = new Release3Do_result();
        result.Success = iface_.Release3Do(args.LlaveU);
        oprot.WriteMessageBegin(new TMessage("Release3Do", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Release3D_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Release3D_args args = new Release3D_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Release3D_result result = new Release3D_result();
        result.Success = iface_.Release3D(args.LlaveU);
        oprot.WriteMessageBegin(new TMessage("Release3D", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ReleaseASM_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ReleaseASM_args args = new ReleaseASM_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ReleaseASM_result result = new ReleaseASM_result();
        result.Success = iface_.ReleaseASM(args.LlaveU);
        oprot.WriteMessageBegin(new TMessage("ReleaseASM", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Release_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Release_args args = new Release_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Release_result result = new Release_result();
        result.Success = iface_.Release(args.LlaveU);
        oprot.WriteMessageBegin(new TMessage("Release", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoLog_args : TBase
    {
      private string _instruccion;

      public string Instruccion
      {
        get
        {
          return _instruccion;
        }
        set
        {
          __isset.instruccion = true;
          this._instruccion = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruccion;
      }

      public DoLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Instruccion = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoLog_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruccion != null && __isset.instruccion) {
            field.Name = "instruccion";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Instruccion);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoLog_args(");
        bool __first = true;
        if (Instruccion != null && __isset.instruccion) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruccion: ");
          __sb.Append(Instruccion);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoLog_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DoLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoLog_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoLog_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoRepo_args : TBase
    {
      private string _repo;

      public string Repo
      {
        get
        {
          return _repo;
        }
        set
        {
          __isset.repo = true;
          this._repo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool repo;
      }

      public DoRepo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Repo = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoRepo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Repo != null && __isset.repo) {
            field.Name = "repo";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Repo);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoRepo_args(");
        bool __first = true;
        if (Repo != null && __isset.repo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repo: ");
          __sb.Append(Repo);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoRepo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DoRepo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoRepo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoRepo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelRepo_args : TBase
    {
      private string _repo;

      public string Repo
      {
        get
        {
          return _repo;
        }
        set
        {
          __isset.repo = true;
          this._repo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool repo;
      }

      public DelRepo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Repo = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DelRepo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Repo != null && __isset.repo) {
            field.Name = "repo";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Repo);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelRepo_args(");
        bool __first = true;
        if (Repo != null && __isset.repo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repo: ");
          __sb.Append(Repo);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelRepo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DelRepo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DelRepo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelRepo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SWRepo_args : TBase
    {
      private string _repoA;
      private string _repoN;

      public string RepoA
      {
        get
        {
          return _repoA;
        }
        set
        {
          __isset.repoA = true;
          this._repoA = value;
        }
      }

      public string RepoN
      {
        get
        {
          return _repoN;
        }
        set
        {
          __isset.repoN = true;
          this._repoN = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool repoA;
        public bool repoN;
      }

      public SWRepo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  RepoA = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  RepoN = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SWRepo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (RepoA != null && __isset.repoA) {
            field.Name = "repoA";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RepoA);
            oprot.WriteFieldEnd();
          }
          if (RepoN != null && __isset.repoN) {
            field.Name = "repoN";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RepoN);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SWRepo_args(");
        bool __first = true;
        if (RepoA != null && __isset.repoA) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RepoA: ");
          __sb.Append(RepoA);
        }
        if (RepoN != null && __isset.repoN) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RepoN: ");
          __sb.Append(RepoN);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SWRepo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SWRepo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SWRepo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SWRepo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpFiles_args : TBase
    {
      private int _Llave;
      private string _instr;
      private string _NomArch;
      private string _SubCarp;
      private string _Conten;
      private string _Proyecto;
      private string _SubCarp2;

      public int Llave
      {
        get
        {
          return _Llave;
        }
        set
        {
          __isset.Llave = true;
          this._Llave = value;
        }
      }

      public string Instr
      {
        get
        {
          return _instr;
        }
        set
        {
          __isset.instr = true;
          this._instr = value;
        }
      }

      public string NomArch
      {
        get
        {
          return _NomArch;
        }
        set
        {
          __isset.NomArch = true;
          this._NomArch = value;
        }
      }

      public string SubCarp
      {
        get
        {
          return _SubCarp;
        }
        set
        {
          __isset.SubCarp = true;
          this._SubCarp = value;
        }
      }

      public string Conten
      {
        get
        {
          return _Conten;
        }
        set
        {
          __isset.Conten = true;
          this._Conten = value;
        }
      }

      public string Proyecto
      {
        get
        {
          return _Proyecto;
        }
        set
        {
          __isset.Proyecto = true;
          this._Proyecto = value;
        }
      }

      public string SubCarp2
      {
        get
        {
          return _SubCarp2;
        }
        set
        {
          __isset.SubCarp2 = true;
          this._SubCarp2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool Llave;
        public bool instr;
        public bool NomArch;
        public bool SubCarp;
        public bool Conten;
        public bool Proyecto;
        public bool SubCarp2;
      }

      public UpFiles_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Llave = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Instr = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  NomArch = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  SubCarp = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Conten = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  Proyecto = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.String) {
                  SubCarp2 = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpFiles_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.Llave) {
            field.Name = "Llave";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Llave);
            oprot.WriteFieldEnd();
          }
          if (Instr != null && __isset.instr) {
            field.Name = "instr";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Instr);
            oprot.WriteFieldEnd();
          }
          if (NomArch != null && __isset.NomArch) {
            field.Name = "NomArch";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NomArch);
            oprot.WriteFieldEnd();
          }
          if (SubCarp != null && __isset.SubCarp) {
            field.Name = "SubCarp";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubCarp);
            oprot.WriteFieldEnd();
          }
          if (Conten != null && __isset.Conten) {
            field.Name = "Conten";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Conten);
            oprot.WriteFieldEnd();
          }
          if (Proyecto != null && __isset.Proyecto) {
            field.Name = "Proyecto";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Proyecto);
            oprot.WriteFieldEnd();
          }
          if (SubCarp2 != null && __isset.SubCarp2) {
            field.Name = "SubCarp2";
            field.Type = TType.String;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubCarp2);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpFiles_args(");
        bool __first = true;
        if (__isset.Llave) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Llave: ");
          __sb.Append(Llave);
        }
        if (Instr != null && __isset.instr) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instr: ");
          __sb.Append(Instr);
        }
        if (NomArch != null && __isset.NomArch) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NomArch: ");
          __sb.Append(NomArch);
        }
        if (SubCarp != null && __isset.SubCarp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubCarp: ");
          __sb.Append(SubCarp);
        }
        if (Conten != null && __isset.Conten) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Conten: ");
          __sb.Append(Conten);
        }
        if (Proyecto != null && __isset.Proyecto) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Proyecto: ");
          __sb.Append(Proyecto);
        }
        if (SubCarp2 != null && __isset.SubCarp2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubCarp2: ");
          __sb.Append(SubCarp2);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpFiles_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpFiles_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpFiles_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpFiles_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Update_args : TBase
    {
      private string _repo;

      public string Repo
      {
        get
        {
          return _repo;
        }
        set
        {
          __isset.repo = true;
          this._repo = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool repo;
      }

      public Update_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Repo = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Update_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Repo != null && __isset.repo) {
            field.Name = "repo";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Repo);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Update_args(");
        bool __first = true;
        if (Repo != null && __isset.repo) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Repo: ");
          __sb.Append(Repo);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Update_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Update_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Update_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Update_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateKey_args : TBase
    {
      private string _llave;

      public string Llave
      {
        get
        {
          return _llave;
        }
        set
        {
          __isset.llave = true;
          this._llave = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llave;
      }

      public UpdateKey_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Llave = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateKey_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Llave != null && __isset.llave) {
            field.Name = "llave";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Llave);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateKey_args(");
        bool __first = true;
        if (Llave != null && __isset.llave) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Llave: ");
          __sb.Append(Llave);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateKey_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UpdateKey_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateKey_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateKey_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PruebaR_args : TBase
    {
      private string _llaveU;
      private string _llaveC;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }

      public string LlaveC
      {
        get
        {
          return _llaveC;
        }
        set
        {
          __isset.llaveC = true;
          this._llaveC = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
        public bool llaveC;
      }

      public PruebaR_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  LlaveC = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PruebaR_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          if (LlaveC != null && __isset.llaveC) {
            field.Name = "llaveC";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveC);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PruebaR_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        if (LlaveC != null && __isset.llaveC) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveC: ");
          __sb.Append(LlaveC);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PruebaR_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PruebaR_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PruebaR_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PruebaR_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Prueba3D_args : TBase
    {
      private string _llaveU;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
      }

      public Prueba3D_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Prueba3D_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Prueba3D_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Prueba3D_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Prueba3D_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Prueba3D_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Prueba3D_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release3Do_args : TBase
    {
      private string _llaveU;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
      }

      public Release3Do_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release3Do_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release3Do_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release3Do_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Release3Do_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release3Do_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release3Do_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release3D_args : TBase
    {
      private string _llaveU;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
      }

      public Release3D_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release3D_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release3D_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release3D_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Release3D_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release3D_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release3D_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseASM_args : TBase
    {
      private string _llaveU;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
      }

      public ReleaseASM_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ReleaseASM_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ReleaseASM_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ReleaseASM_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ReleaseASM_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ReleaseASM_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ReleaseASM_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release_args : TBase
    {
      private string _llaveU;

      public string LlaveU
      {
        get
        {
          return _llaveU;
        }
        set
        {
          __isset.llaveU = true;
          this._llaveU = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool llaveU;
      }

      public Release_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  LlaveU = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (LlaveU != null && __isset.llaveU) {
            field.Name = "llaveU";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(LlaveU);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release_args(");
        bool __first = true;
        if (LlaveU != null && __isset.llaveU) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LlaveU: ");
          __sb.Append(LlaveU);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Release_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Release_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Release_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Release_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
